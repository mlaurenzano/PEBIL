STATIC_INST_LIB  = @PEBIL_STATIC_BUILD@
PEBIL_MIC_LIBS_BUILD = @PEBIL_MIC_LIBS_BUILD@
PEBIL_LIBS = 
ifeq ($(STATIC_INST_LIB),yes)
	PEBIL_LIBS = libtimer.a  libclassifier.a  libpfreq.a  libtautrace.a  libcounter.a  libsimulator.a
else
	PEBIL_LIBS = libtimer.so libclassifier.so libpfreq.so libtautrace.so liblooptimer.so libcounter.so libsimulator.so
endif

LIBDIR      = ../lib
MICLIBDIR      = ../miclib
BINDIR      = ../bin

LIB_TARGETS = $(foreach pebil_lib,$(PEBIL_LIBS),$(LIBDIR)/$(pebil_lib))
MICLIB_TARGETS = $(foreach pebil_lib,$(PEBIL_LIBS),$(MICLIBDIR)/$(pebil_lib))
MPICC       = @MPICC@
MPICXX      = @MPICXX@
MPICC_MIC       = mpiicc
MPICXX_MIC      = mpiicpc
CFLAGS      = @CFLAGS@ @MPI_FLAGS@ @CPUFREQ_FLAGS@ @THROTTLER_FLAGS@ -w
CXXFLAGS    = @MPI_CXXFLAGS@ @MPI_FLAGS@ @CPUFREQ_FLAGS@ @THROTTLER_FLAGS@ -w
MICFLAGS		=	-mmic

ifeq ($(PEBIL_MIC_LIBS_BUILD),yes)
	ALL_TARGETS = $(LIB_TARGETS) $(MICLIB_TARGETS)
else
	ALL_TARGETS	=	$(LIB_TARGETS)
endif

SHARED_OPT  = -fPIC
EXTRA_FLAGS = $(SHARED_OPT)
SHARED_LIB  = -shared -ldl -lpthread
AR          = ar rcs

REUSE_LIBS  = -L../external/ReuseDistance -lReuseDistance
REUSE_MIC_LIBS  = -L../external/ReuseDistanceForMIC -lReuseDistance
EXTRA_LIBS  =
EXTRA_INC   = -I../instcode -I../external/ReuseDistance

COMMON_OBJS = $(LIBDIR)/InstrumentationCommon.o
COMMON_OBJS_MIC = $(MICLIBDIR)/InstrumentationCommon.o

all: $(ALL_TARGETS)

$(LIBDIR)/%.o: %.c
	$(MPICC) $(CFLAGS) $(EXTRA_FLAGS) $(EXTRA_DEF) $(EXTRA_INC) -c -o $@ $< $(SHARED_OPT)
$(LIBDIR)/%.O: %.cpp
	$(MPICXX) $(CXXFLAGS) $(EXTRA_FLAGS) $(EXTRA_DEF) $(EXTRA_INC) -c -o $@ $< $(SHARED_OPT)
$(MICLIBDIR)/%.o: %.c
	$(MPICC_MIC) $(CFLAGS) $(MICFLAGS) $(EXTRA_FLAGS) $(EXTRA_DEF) $(EXTRA_INC) -c -o $@ $< $(SHARED_OPT)
$(MICLIBDIR)/%.O: %.cpp
	$(MPICXX_MIC) $(CXXFLAGS) $(MICFLAGS) $(EXTRA_FLAGS) $(EXTRA_DEF) $(EXTRA_INC) -c -o $@ $< $(SHARED_OPT)

$(LIBDIR)/libcounter.so : $(LIBDIR)/CounterFunctions.O
	$(MPICXX) $(SHARED_LIB) -o $@ $^ $(EXTRA_LIBS) $(CXXFLAGS)
$(LIBDIR)/libcounter.a : $(LIBDIR)/CounterFunctions.o $(COMMON_OBJS)
	$(AR) $@ $(LIBDIR)/CounterFunctions.o $(COMMON_OBJS)
$(MICLIBDIR)/libcounter.so : $(MICLIBDIR)/CounterFunctions.O
	$(MPICXX_MIC) $(SHARED_LIB) -o $@ $^ $(EXTRA_LIBS) $(CXXFLAGS) $(MICFLAGS)
$(MICLIBDIR)/libcounter.a : $(MICLIBDIR)/CounterFunctions.o $(COMMON_OBJS_MIC)
	$(AR) $@ $(MICLIBDIR)/CounterFunctions.o $(COMMON_OBJS_MIC)

$(LIBDIR)/libsimulator.so : $(LIBDIR)/Simulation.O
	$(MPICXX) $(SHARED_LIB) -o $@ $^ $(EXTRA_LIBS) $(REUSE_LIBS) $(CXXFLAGS)
$(LIBDIR)/libsimulator.a : $(LIBDIR)/Simulation.o $(LIBDIR)/CacheSimulationCommon.o $(COMMON_OBJS)
	$(AR) $@ $(LIBDIR)/Simulation.o $(LIBDIR)/CacheSimulationCommon.o $(COMMON_OBJS)
$(MICLIBDIR)/libsimulator.so : $(MICLIBDIR)/Simulation.O
	$(MPICXX_MIC) $(SHARED_LIB) -o $@ $^ $(EXTRA_LIBS) $(REUSE_MIC_LIBS) $(CXXFLAGS) $(MICFLAGS)
$(MICLIBDIR)/libsimulator.a : $(MICLIBDIR)/Simulation.o $(MICLIBDIR)/CacheSimulationCommon.o $(COMMON_OBJS_MIC)
	$(AR) $@ $(MICLIBDIR)/Simulation.o $(MICLIBDIR)/CacheSimulationCommon.o $(COMMON_OBJS_MIC)

$(LIBDIR)/liblooptimer.so : $(LIBDIR)/LoopTimer.O
	$(MPICXX) $(SHARED_LIB) -o $@ $^ $(EXTRA_LIBS) $(CXXFLAGS)
$(MICLIBDIR)/liblooptimer.so : $(MICLIBDIR)/LoopTimer.O
	$(MPICXX_MIC) $(SHARED_LIB) -o $@ $^ $(EXTRA_LIBS) $(CXXFLAGS) $(MICFLAGS)

$(LIBDIR)/libfrequencyconfig.so : $(LIBDIR)/FrequencyConfig.O
	$(MPICXX) $(SHARED_LIB) -o $@ $^ $(EXTRA_LIBS) $(CXXFLAGS)
$(MICLIBDIR)/libfrequencyconfig.so : $(MICLIBDIR)/FrequencyConfig.O
	$(MPICXX_MIC) $(SHARED_LIB) -o $@ $^ $(EXTRA_LIBS) $(CXXFLAGS) $(MICFLAGS)

$(LIBDIR)/libpapiinst.so : $(LIBDIR)/PAPIInst.O
	$(MPICXX) $(SHARED_LIB) -o $@ $^ $(EXTRA_LIBS) $(CXXFLAGS)
$(MICLIBDIR)/libpapiinst.so : $(MICLIBDIR)/PAPIInst.O
	$(MPICXX_MIC) $(SHARED_LIB) -o $@ $^ $(EXTRA_LIBS) $(CXXFLAGS) $(MICFLAGS)

$(LIBDIR)/libtimer.so : $(LIBDIR)/TimerFunctions.O
	$(MPICXX) $(SHARED_LIB) -o $@ $^ $(EXTRA_LIBS) $(CXXFLAGS)
$(LIBDIR)/libtimer.a : $(LIBDIR)/TimerFunctions.o $(COMMON_OBJS) 
	$(AR) $@ $(LIBDIR)/TimerFunctions.o $(COMMON_OBJS)
$(MICLIBDIR)/libtimer.so : $(MICLIBDIR)/TimerFunctions.O
	$(MPICXX_MIC) $(SHARED_LIB) -o $@ $^ $(EXTRA_LIBS) $(CXXFLAGS) $(MICFLAGS)
$(MICLIBDIR)/libtimer.a : $(MICLIBDIR)/TimerFunctions.o $(COMMON_OBJS_MIC) 
	$(AR) $@ $(MICLIBDIR)/TimerFunctions.o $(COMMON_OBJS_MIC)

$(LIBDIR)/libpapifunc.so : $(LIBDIR)/PAPIFunc.O
	$(MPICXX) $(SHARED_LIB) -o $@ $^ $(EXTRA_LIBS) $(CXXFLAGS)
$(MICLIBDIR)/libpapifunc.so : $(MICLIBDIR)/PAPIFunc.O
	$(MPICXX_MIC) $(SHARED_LIB) -o $@ $^ $(EXTRA_LIBS) $(CXXFLAGS) $(MICFLAGS)

$(LIBDIR)/libclassifier.so : $(LIBDIR)/ClassifierFunctions.o $(COMMON_OBJS)
	$(MPICC) $(SHARED_LIB) -o $@ $(LIBDIR)/ClassifierFunctions.o $(COMMON_OBJS) $(EXTRA_LIBS) $(CFLAGS)
$(LIBDIR)/libclassifier.a : $(LIBDIR)/ClassifierFunctions.o
	$(AR) $@ $(LIBDIR)/ClassifierFunctions.o
$(MICLIBDIR)/libclassifier.so : $(MICLIBDIR)/ClassifierFunctions.o $(COMMON_OBJS_MIC)
	$(MPICC_MIC) $(SHARED_LIB) -o $@ $(MICLIBDIR)/ClassifierFunctions.o $(COMMON_OBJS_MIC) $(EXTRA_LIBS) $(CFLAGS) $(MICFLAGS)
$(MICLIBDIR)/libclassifier.a : $(MICLIBDIR)/ClassifierFunctions.o
	$(AR) $@ $(MICLIBDIR)/ClassifierFunctions.o

$(LIBDIR)/libpfreq.so : $(LIBDIR)/Frequency.o $(COMMON_OBJS)
	$(MPICC) $(SHARED_LIB) -o $@ $(LIBDIR)/Frequency.o $(COMMON_OBJS) $(EXTRA_LIBS) $(CFLAGS)
$(LIBDIR)/libpfreq.a : $(LIBDIR)/Frequency.o
	$(AR) $@ $(LIBDIR)/Frequency.o
$(MICLIBDIR)/libpfreq.so : $(MICLIBDIR)/Frequency.o $(COMMON_OBJS_MIC)
	$(MPICC_MIC) $(SHARED_LIB) -o $@ $(MICLIBDIR)/Frequency.o $(COMMON_OBJS_MIC) $(EXTRA_LIBS) $(CFLAGS) $(MICFLAGS)
$(MICLIBDIR)/libpfreq.a : $(MICLIBDIR)/Frequency.o
	$(AR) $@ $(MICLIBDIR)/Frequency.o

$(LIBDIR)/libtautrace.so : $(LIBDIR)/tautrace.o $(COMMON_OBJS)
	$(MPICC) $(SHARED_LIB) -o $@ $(LIBDIR)/tautrace.o $(COMMON_OBJS) $(EXTRA_LIBS) $(CFLAGS)
$(LIBDIR)/libtautrace.a : $(LIBDIR)/tautrace.o
	$(AR) $@ $(LIBDIR)/tautrace.o
$(MICLIBDIR)/libtautrace.so : $(MICLIBDIR)/tautrace.o $(COMMON_OBJS_MIC)
	$(MPICC_MIC) $(SHARED_LIB) -o $@ $(MICLIBDIR)/tautrace.o $(COMMON_OBJS_MIC) $(EXTRA_LIBS) $(CFLAGS) $(MICFLAGS)
$(MICLIBDIR)/libtautrace.a : $(MICLIBDIR)/tautrace.o
	$(AR) $@ $(MICLIBDIR)/tautrace.o

clean: 
	rm -f $(LIBDIR)/*.o $(LIBDIR)/*.O $(LIBDIR)/*.i $(LIBDIR)/*.s $(LIBDIR)/*.ii $(MICLIBDIR)/*.o $(MICLIBDIR)/*.O $(MICLIBDIR)/*.i $(MICLIBDIR)/*.s $(MICLIBDIR)/*.ii $(ALL_TARGETS)

install:
	echo "Nothing to install in instcode"
	#cp $(LIB_TARGETS) $(LIBDIR)

