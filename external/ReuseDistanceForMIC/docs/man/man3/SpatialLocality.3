.TH "SpatialLocality" 3 "21 Oct 2012" "Version 0.01" "ReuseDistance" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SpatialLocality \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ReuseDistance.hpp>\fP
.PP
Inherits \fBReuseDistance\fP.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSpatialLocality\fP (uint64_t w, uint64_t b, uint64_t n)"
.br
.ti -1c
.RI "\fBSpatialLocality\fP (uint64_t w, uint64_t b)"
.br
.ti -1c
.RI "\fBSpatialLocality\fP (uint64_t w)"
.br
.ti -1c
.RI "\fBSpatialLocality\fP ()"
.br
.ti -1c
.RI "virtual \fB~SpatialLocality\fP ()"
.br
.ti -1c
.RI "virtual void \fBGetActiveAddresses\fP (std::vector< uint64_t > &addrs)"
.br
.ti -1c
.RI "virtual void \fBProcess\fP (\fBReuseEntry\fP &addr)"
.br
.ti -1c
.RI "virtual void \fBSkipAddresses\fP (uint64_t amount)"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const uint64_t \fBDefaultWindowSize\fP = 64"
.br
.in -1c
.SH "Detailed Description"
.PP 
Finds and tracks spatial locality within a memory address stream. Spatial locality is defined as the minimum distance between the current address and any of the previous N addresses, as in http://www.sdsc.edu/~allans/sc05_locality.pdf. This class allows that window size N to be customized. For basic usage, see the documentation at http://bit.ly/ScqZVj for the constructors, the Process methods and the Print methods. Also see the simple test file test/test.cpp included in this source package. 
.PP
Definition at line 388 of file ReuseDistance.hpp.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SpatialLocality::SpatialLocality (uint64_t w, uint64_t b, uint64_t n)\fC [inline]\fP"Contructs a \fBReuseDistance\fP object.
.PP
\fBParameters:\fP
.RS 4
\fIw\fP The maximum window size, which is the maximum number of addresses that will be searched for spatial locality. w != \fBReuseDistance::Infinity\fP is enforced at runtime. 
.br
\fIb\fP All distances not greater than b will be tracked individually. All distances are tracked individually if b == \fBReuseDistance::Infinity\fP. Beyond individual tracking, distances are tracked in bins whose boundaries are the powers of two greater than b and not greater than n. 
.br
\fIn\fP All distances greater than n will be counted as infinite. Use n == \fBReuseDistance::Infinity\fP for no limit. n >= b is enforced at runtime. 
.RE
.PP

.PP
Definition at line 420 of file ReuseDistance.hpp.
.SS "SpatialLocality::SpatialLocality (uint64_t w, uint64_t b)\fC [inline]\fP"Constructs a \fBSpatialLocality\fP object. Equivalent to calling the other 3-argument constructor with n == \fBReuseDistance::Infinity\fP 
.PP
Definition at line 426 of file ReuseDistance.hpp.
.SS "SpatialLocality::SpatialLocality (uint64_t w)\fC [inline]\fP"Constructs a \fBSpatialLocality\fP object. Equivalent to calling the other 3-argument constructor with w == b and n == \fBReuseDistance::Infinity\fP 
.PP
Definition at line 432 of file ReuseDistance.hpp.
.SS "SpatialLocality::SpatialLocality ()\fC [inline]\fP"Constructs a \fBSpatialLocality\fP object. Equivalent to calling the other 3-argument constructor with w == b == \fBSpatialLocality::DefaultWindowSize\fP and n == \fBReuseDistance::Infinity\fP 
.PP
Definition at line 438 of file ReuseDistance.hpp.
.SS "virtual SpatialLocality::~SpatialLocality ()\fC [inline, virtual]\fP"Destroys a \fBSpatialLocality\fP object. 
.PP
Definition at line 443 of file ReuseDistance.hpp.
.SH "Member Function Documentation"
.PP 
.SS "void SpatialLocality::GetActiveAddresses (std::vector< uint64_t > & addrs)\fC [virtual]\fP"Get a std::vector containing all of the addresses currently in this \fBSpatialLocality\fP object's active window.
.PP
\fBParameters:\fP
.RS 4
\fIaddrs\fP A std::vector which will contain the addresses. It is an error to pass this vector non-empty (that is addrs.size() == 0 is enforced at runtime).
.RE
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP

.PP
Reimplemented from \fBReuseDistance\fP.
.PP
Definition at line 460 of file ReuseDistance.cpp.
.SS "void SpatialLocality::Process (\fBReuseEntry\fP & addr)\fC [virtual]\fP"Process a single memory address.
.PP
\fBParameters:\fP
.RS 4
\fIaddr\fP The structure describing the memory address to process.
.RE
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP

.PP
Reimplemented from \fBReuseDistance\fP.
.PP
Definition at line 389 of file ReuseDistance.cpp.
.SS "void SpatialLocality::SkipAddresses (uint64_t amount)\fC [virtual]\fP"Pretend that some number of addresses in the stream were skipped. Useful for intervel-based sampling. This has the effect of flushing the entire window.
.PP
\fBParameters:\fP
.RS 4
\fIamount\fP The number of addresses to skip.
.RE
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP

.PP
Reimplemented from \fBReuseDistance\fP.
.PP
Definition at line 441 of file ReuseDistance.cpp.
.SH "Member Data Documentation"
.PP 
.SS "const uint64_t \fBSpatialLocality::DefaultWindowSize\fP = 64\fC [static]\fP"
.PP
Definition at line 407 of file ReuseDistance.hpp.

.SH "Author"
.PP 
Generated automatically by Doxygen for ReuseDistance from the source code.
