<?xml version="1.0"?>
<?xml-stylesheet href="x86optable.xsl" type="text/xsl"?>
<x86optable>

  <!--
   UDIS86 X86/AMD64/IA32/IA32e OPCODE TABLE   
    -->

  <!-- SSE 4+, AVX, AES added by Michael Laurenzano michaell@sdsc.edu -->
  <!-- format
  <instruction mnemonic="mnemonic">
     <opcode> prefixes; opcode(s); operands; flags; implicit_operand; class </opcode>
     ...
  </instruction>
  -->
  <!-- TODO: implement undocumented instructions: 
       http://en.wikipedia.org/wiki/X86_instruction_listings#Undocumented_instructions_2
    -->
  <!-- TODO: document specific sizes for V, W in SSE/AVX where known
    -->

  <instruction mnemonic="undocumented">
    <opcode> ; FF /7 ; ; ; </opcode>
  </instruction>

  <!-- MAL SSE 4.1 -->
  <instruction mnemonic="mpsadbw">
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=3a 42; V W Ib ; ; </opcode>
    <opcode> aso oso rexr rexx rexb ; avxC4 sse66 0f /3byte=3a 42; V X W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="phminposuw"> 
   <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 41; V W ; ; </opcode>
   <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 41; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="pmuldq"> 
   <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 28; V W ; ; </opcode>
   <opcode> aso oso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 28; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="pmulhrsw">
    <opcode> aso oso rexr rexx rexb ; 0f /3byte=38 0b ; P Q ; ; </opcode>
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 0b ; V W ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 0b ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="dpps">
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=3a 40; Vx Wx Ib ; ; </opcode>
    <opcode> aso oso rexr rexx rexb ; avxC4 sse66 0f /3byte=3a 40; Vx X Wx Ib ; ; </opcode>
  </instruction>
  <instruction mnemonic="dppd">
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=3a 41; Vx Wx Ib ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=3a 41; Vx X Wx Ib ; ; </opcode>
  </instruction>

  <!-- TODO it isn't clear to me whether the 1-byte (c5) form of these is valid (they have WIG but how to encode the long sse prefixes?) -->
  <instruction mnemonic="pblendvb"> 
   <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 10; V W ; ; u:mm0 </opcode>
   <opcode> aso oso rexr rexx rexb ; avxC4 sse66 0f /3byte=3A 4C; V X W Ib; ; </opcode>
  </instruction>

  <instruction mnemonic="pblendw">
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=3a 0e; V W Ib ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=3a 0e; V X W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="blendpd">
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=3a 0d; V W Ib ; ; </opcode>
    <opcode> aso oso rexr rexx rexb ; avxC4 sse66 0f /3byte=3a 0d; V X W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="blendps">
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=3a 0c; V W Ib ; ; </opcode>
    <opcode> aso oso rexr rexx rexb ; avxC4 sse66 0f /3byte=3a 0c; V X W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="blendvpd"> 
   <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 15; V W ; ; u:mm0 </opcode>
   <opcode> aso oso rexr rexx rexb vexix ; avxC4 sse66 0f /3byte=3A 4B /W=0; V X W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="blendvps"> 
   <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 14; V W ; ; u:mm0 </opcode>
   <opcode> aso oso rexr rexx rexb vexix ; avxC4 sse66 0f /3byte=3A 4A /W=0; V X W Ib ; ; </opcode>
  </instruction>
  <instruction mnemonic="pminsb">
   <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 38; Vx Wx ; ; </opcode>
   <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 38; V X W ; ; </opcode>
  </instruction>
  <instruction mnemonic="pminsd"> 
   <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 39; Vx Wx ; ; </opcode>
   <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 39; V X W ; ; </opcode>
  </instruction>
  <instruction mnemonic="pminuw">
   <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 3a; V W ; ; </opcode>
   <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 3a; V X W ; ; </opcode>
  </instruction>
  <instruction mnemonic="pminud">
   <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 3b; V W ; ; </opcode>
   <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 3b; V X W ; ; </opcode>
  </instruction>
  <instruction mnemonic="pmaxsb">
   <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 3c; V W ; ; </opcode>
   <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 3c; V X W ; ; </opcode>
  </instruction>
  <instruction mnemonic="pmaxsd">
   <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 3d; Vx Wx ; ; </opcode>
   <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 3d; V X W ; ; </opcode>
  </instruction>
  <instruction mnemonic="pmaxud">
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 3f; V W ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 3f; V X W ; ; </opcode>
  </instruction>
  <instruction mnemonic="pmaxuw">
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 3e; V W ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 3e; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="roundps">
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=3a 08; Vx Wx Ib ; ; </opcode>
    <opcode> aso oso rexr rexx rexb ; avxC4 sse66 0f /3byte=3a 08; V W Ib ; ; </opcode>
  </instruction>
  <instruction mnemonic="roundpd">
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=3a 09; Vx Wx Ib ; ; </opcode>
    <opcode> aso oso rexr rexx rexb ; avxC4 sse66 0f /3byte=3a 09; V W Ib ; ; </opcode>
  </instruction>
  <instruction mnemonic="roundss">
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=3a 0a; Vd Wd Ib ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=3a 0a; V X W Ib ; ; </opcode>
  </instruction>
  <instruction mnemonic="roundsd">
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=3a 0b; Vq Wq Ib ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=3a 0b; V X W Ib ; ; </opcode>
  </instruction>

  <!-- TODO: these + pextrw show a good example of specific operand sizing -->
  <instruction mnemonic="pextrb">
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=3a 14 ; V W Ib ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=3a 14 ; V W Ib ; ; </opcode>
  </instruction>
  <instruction mnemonic="pextrd">
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=3a 16 ; V W Ib ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=3a 16 ; V W Ib ; ; </opcode>
  </instruction>
  <instruction mnemonic="pextrq">
    <opcode> aso oso rexw rexr rexx rexb ; sse66 0f /3byte=3a 16 ; V W Ib ; ; </opcode>
    <opcode> aso oso rexw rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=3a 16 ; V W Ib ; ; </opcode>
  </instruction>
  <instruction mnemonic="extractps">
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=3a 17; V W Ib ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=3a 17; V W Ib ; ; </opcode>
  </instruction>
  <instruction mnemonic="pinsrb">
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=3a 20; V W Ib ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=3a 20; V X W Ib ; ; </opcode>
  </instruction>
  <instruction mnemonic="pinsrd">
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=3a 22; V W Ib ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=3a 22; V X W Ib ; ; </opcode>
  </instruction>
  <instruction mnemonic="pinsrq">
    <opcode> aso oso rexw rexr rexx rexb ; sse66 0f /3byte=3a 22; V W Ib ; ; </opcode>
    <opcode> aso oso rexw rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=3a 22; V X W Ib ; ; </opcode>
  </instruction>
  <instruction mnemonic="insertps">
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=3a 21; V W Ib ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=3a 21; V X W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="pmovsxbw">
    <opcode> aso rexr rexx rexb ; sse66 0f /3byte=38 20 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 20 ; V W ; ; </opcode>
  </instruction>
  <instruction mnemonic="pmovsxbd">
    <opcode> aso rexr rexx rexb ; sse66 0f /3byte=38 21 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 21 ; V W ; ; </opcode>
  </instruction>
  <instruction mnemonic="pmovsxbq">
    <opcode> aso rexr rexx rexb ; sse66 0f /3byte=38 22 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 22 ; V W ; ; </opcode>
  </instruction>
  <instruction mnemonic="pmovsxwd">
    <opcode> aso rexr rexx rexb ; sse66 0f /3byte=38 23 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 23 ; V W ; ; </opcode>
  </instruction>
  <instruction mnemonic="pmovsxwq">
    <opcode> aso rexr rexx rexb ; sse66 0f /3byte=38 24 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig; avxC4 sse66 0f /3byte=38 24 ; V W ; ; </opcode>
  </instruction>
  <instruction mnemonic="pmovsxdq">
    <opcode> aso rexr rexx rexb ; sse66 0f /3byte=38 25 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 25 ; V W ; ; </opcode>
  </instruction>
  <instruction mnemonic="pmovzxbw">
    <opcode> aso rexr rexx rexb ; sse66 0f /3byte=38 30 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 30 ; V W ; ; </opcode>
  </instruction>
  <instruction mnemonic="pmovzxbd">
    <opcode> aso rexr rexx rexb ; sse66 0f /3byte=38 31 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 31 ; V W ; ; </opcode>
  </instruction>
  <instruction mnemonic="pmovzxbq">
    <opcode> aso rexr rexx rexb ; sse66 0f /3byte=38 32 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 32 ; V W ; ; </opcode>
  </instruction>
  <instruction mnemonic="pmovzxwd">
    <opcode> aso rexr rexx rexb ; sse66 0f /3byte=38 33 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 33 ; V W ; ; </opcode>
  </instruction>
  <instruction mnemonic="pmovzxwq">
    <opcode> aso rexr rexx rexb ; sse66 0f /3byte=38 34 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 34 ; V W ; ; </opcode>
  </instruction>
  <instruction mnemonic="pmovzxdq">
    <opcode> aso rexr rexx rexb ; sse66 0f /3byte=38 35 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 35 ; V W ; ; </opcode>
  </instruction>

  <!-- not sure I did the avx version correctly... FIXME -->
  <instruction mnemonic="ptest">
    <opcode> aso rexr rexx rexb ; sse66 0f /3byte=38 17 ; V W ; d:alu ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 17 ; V W ; d:alu ; </opcode>
  </instruction>

  <instruction mnemonic="pcmpeqq">
    <opcode> aso rexr rexx rexb ; sse66 0f /3byte=38 29 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 29 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="packusdw">
    <opcode> aso rexr rexx rexb ; sse66 0f /3byte=38 2b ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 2b ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="movntdqa">
    <opcode> aso rexr rexx rexb ; sse66 0f /3byte=38 2a ; V M ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 2a ; V M ; ; </opcode>
  </instruction>

  <instruction mnemonic="pcmpestrm">
    <opcode> aso rexr rexx rexb ; sse66 0f /3byte=3a 60 ; V W Ib ; d:alu ; d:mm0 </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=3a 60 ; V W Ib ; d:alu ; d:mm0 </opcode>
  </instruction>
  <instruction mnemonic="pcmpestri">
    <opcode> aso rexr rexx rexb ; sse66 0f /3byte=3a 61 ; V W Ib ; d:alu ; d:cx </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=3a 61 ; V W Ib ; d:alu ; d:cx </opcode>
  </instruction>
  <instruction mnemonic="pcmpistrm">
    <opcode> aso rexr rexx rexb ; sse66 0f /3byte=3a 62 ; V W Ib ; d:alu ; d:mm0 </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=3a 62 ; V W Ib ; d:alu ; d:mm0 </opcode>
  </instruction>
  <instruction mnemonic="pcmpistri">
    <opcode> aso rexr rexx rexb ; sse66 0f /3byte=3a 63 ; V W Ib ; d:alu ; d:cx </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=3a 63 ; V W Ib ; d:alu ; d:cx </opcode>
  </instruction>

  <instruction mnemonic="pcmpgtq">
    <opcode> aso rexr rexx rexb ; sse66 0f /3byte=38 37 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 37 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="pclmulqdq">
    <opcode> aso rexr rexx rexb ; sse66 0f /3byte=3a 44 ; V W Ib ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=3a 44 ; V X W Ib ; ; </opcode>
  </instruction>

  <!-- MAL SSE 4a -->
<!-- would like to find more complete docs before i implement
  <instruction mnemonic="extrq">
    <opcode> ; ; ; ; </opcode>
  </instruction>
  <instruction mnemonic="insertq">
    <opcode> ; ; ; ; </opcode>
  </instruction>
  <instruction mnemonic="movntsd">
    <opcode> ; ; ; ; </opcode>
  </instruction>
  <instruction mnemonic="movntss">
    <opcode> ; ; ; ; </opcode>
  </instruction>

MAL SSE 3 
  <instruction mnemonic="invept">
    <opcode> ; ; ; ; </opcode>
  </instruction>
  <instruction mnemonic="invvpid">
    <opcode> ; ; ; ; </opcode>
  </instruction>
  <instruction mnemonic="movbe">
    <opcode> ; ; ; ; </opcode>
  </instruction>

MAL MISSING PRE SSE?
  <instruction mnemonic="crc32">
    <opcode> ; ; ; ; </opcode>
  </instruction>
  <instruction mnemonic="lzcnt">
    <opcode> ; ; ; ; </opcode>
  </instruction>
-->


  <instruction mnemonic="aesimc">
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 db ; V W ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 db ; V W ; ; </opcode>
  </instruction>
  <instruction mnemonic="aesenc">
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 dc ; V W ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 dc ; V X W ; ; </opcode>
  </instruction>
  <instruction mnemonic="aesenclast">
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 dd ; V W ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 dd ; V X W ; ; </opcode>
  </instruction>
  <instruction mnemonic="aesdec">
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 de ; V W ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 de ; V X W ; ; </opcode>
  </instruction>
  <instruction mnemonic="aesdeclast">
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 df ; V W ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 df ; V X W ; ; </opcode>
  </instruction>
  <instruction mnemonic="aeskeygenassist">
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=3a df ; V W Ib ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=3a df ; V W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="pabsb">
    <opcode> aso oso rexr rexx rexb ; 0f /3byte=38 1c ; P Q ; ; </opcode>
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 1c ; V W ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 1c ; V X W ; ; </opcode>
  </instruction>
  <instruction mnemonic="pabsd">
    <opcode> aso oso rexr rexx rexb ; 0f /3byte=38 1e ; Pq Qq ; ; </opcode>
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 1e ; Vx Wx ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 1e ; V X W ; ; </opcode>
  </instruction>
  <instruction mnemonic="pabsw">
    <opcode> aso oso rexr rexx rexb ; 0f /3byte=38 1d ; P Q ; ; </opcode>
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 1d ; V W ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 1d ; V X W ; ; </opcode>
  </instruction>
  <instruction mnemonic="psignb">
    <opcode> aso oso rexr rexx rexb ; 0f /3byte=38 08 ; P Q ; ; </opcode>
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 08 ; V W ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 08 ; V X W ; ; </opcode>
  </instruction>
  <instruction mnemonic="psignd">
    <opcode> aso oso rexr rexx rexb ; 0f /3byte=38 0a ; P Q ; ; </opcode>
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 0a ; V W ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 0a ; V X W ; ; </opcode>
  </instruction>
  <instruction mnemonic="psignw">
    <opcode> aso oso rexr rexx rexb ; 0f /3byte=38 09 ; P Q ; ; </opcode>
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 09 ; V W ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 09 ; V X W ; ; </opcode>
  </instruction>
  <instruction mnemonic="palignr">
    <opcode> aso oso rexr rexx rexb ; 0f /3byte=3a 0f ; P Q Ib ; ; </opcode>
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=3a 0f ; V W Ib ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=3a 0f ; V X W Ib ; ; </opcode>
  </instruction>
  <instruction mnemonic="phaddd">
    <opcode> aso oso rexr rexx rexb ; 0f /3byte=38 02 ; P Q ; ; </opcode>
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 02 ; V W ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 02 ; V X W ; ; </opcode>
  </instruction>
  <instruction mnemonic="phaddw">
    <opcode> aso oso rexr rexx rexb ; 0f /3byte=38 01 ; P Q ; ; </opcode>
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 01 ; V W ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 01 ; V X W ; ; </opcode>
  </instruction>
  <instruction mnemonic="phaddsw">
    <opcode> aso oso rexr rexx rexb ; 0f /3byte=38 03 ; P Q ; ; </opcode>
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 03 ; V W ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 03 ; V X W ; ; </opcode>
  </instruction>
  <instruction mnemonic="phsubd">
    <opcode> aso oso rexr rexx rexb ; 0f /3byte=38 06 ; P Q ; ; </opcode>
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 06 ; V W ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 06 ; V X W ; ; </opcode>
  </instruction>
  <instruction mnemonic="phsubw">
    <opcode> aso oso rexr rexx rexb ; 0f /3byte=38 05 ; P Q ; ; </opcode>
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 05 ; V W ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 05 ; V X W ; ; </opcode>
  </instruction>
  <instruction mnemonic="phsubsw">
    <opcode> aso oso rexr rexx rexb ; 0f /3byte=38 07 ; P Q ; ; </opcode>
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 07 ; V W ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 07 ; V X W ; ; </opcode>
  </instruction>
  <instruction mnemonic="pmaddusbw">
    <opcode> aso oso rexr rexx rexb ; 0f /3byte=38 04 ; P Q ; ; </opcode>
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 04 ; V W ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 04; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="3dnow">
    <opcode> ; 0f 0f ; P Q ; ; </opcode>
  </instruction>

  <instruction mnemonic="aaa">
    <opcode mode="inv64"> ; 37 ; ; d:alu ; u:ax d:ax </opcode>
  </instruction>

  <instruction mnemonic="aad">
    <opcode mode="inv64"> ; d5 ; Ib ; d:alu ; u:ax d:ax </opcode>
  </instruction>

  <instruction mnemonic="aam">
    <opcode mode="inv64"> ; d4 ; Ib ; d:alu ; u:ax d:ax </opcode>
  </instruction>

  <instruction mnemonic="aas">
    <opcode mode="inv64"> ; 3f ; ; u:af d:alu ; u:ax d:ax </opcode>
  </instruction>

  <instruction mnemonic="adc">
    <opcode> aso rexr rexx rexb ; 10 ; Eb Gb ; u:cf d:alu ; </opcode>
    <opcode> aso oso rexw rexr rexx rexb ; 11 ; Ev Gv ; u:cf d:alu ; </opcode>
    <opcode> aso rexr rexx rexb ; 12 ; Gb Eb ; u:cf d:alu ; </opcode>
    <opcode> aso oso rexw rexr rexx rexb ; 13 ; Gv Ev ; u:cf d:alu ; </opcode>
    <opcode> ; 14 ; AL Ib ; u:cf d:alu ; </opcode>
    <opcode> oso rexw ; 15 ; rAX Iz ; u:cf d:alu ; </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; 80 /2 ; Eb Ib ; u:cf d:alu ; </opcode>
    <opcode cast="1" mode="inv64"> aso rexr rexx rexb ; 82 /2 ; Eb Ib ; u:cf d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; 81 /2 ; Ev Iz ; u:cf d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; 83 /2 ; Ev Ib ; u:cf d:alu ; </opcode>
  </instruction>

  <instruction mnemonic="add">
    <opcode> aso rexr rexx rexb ; 00 ; Eb Gb ; d:alu ; </opcode>
    <opcode> aso oso rexw rexr rexx rexb ; 01 ; Ev Gv ; d:alu ; </opcode>
    <opcode> aso rexr rexx rexb ; 02 ; Gb Eb ; d:alu ; </opcode>
    <opcode> aso oso rexw rexr rexx rexb ; 03 ; Gv Ev ; d:alu ; </opcode>
    <opcode> ; 04 ; AL Ib ; d:alu ; </opcode>
    <opcode> oso rexw ; 05 ; rAX Iz ; d:alu ; </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; 80 /0 ; Eb Ib ; d:alu ; </opcode>
    <opcode cast="1" mode="inv64"> aso rexr rexx rexb ; 82 /0 ; Eb Ib ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; 81 /0 ; Ev Iz ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; 83 /0 ; Ev Ib ; d:alu ; </opcode>
  </instruction>

  <instruction mnemonic="addpd">
    <opcode> aso rexr rexx rexb ; sse66 0f 58 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f 58 ; Vx X Wx ; ; </opcode>
  </instruction>

  <instruction mnemonic="addps">
    <opcode> aso rexr rexx rexb ; 0f 58 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 0f 58 ; Vx X Wx ; ; </opcode>
  </instruction>

  <instruction mnemonic="addsd">
    <opcode> aso rexr rexx rexb ; ssef2 0f 58 ; Vq Wq ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 ssef2 0f 58 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="addss">
    <opcode> aso rexr rexx rexb ; ssef3 0f 58 ; Vd Wd ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 ssef3 0f 58 ; V X Wd ; ; </opcode>
  </instruction>

  <instruction mnemonic="addsubpd">
    <opcode> aso rexr rexx rexb ; sse66 0f d0 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f d0 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="addsubps">
    <opcode> aso rexr rexx rexb ; ssef2 0f d0 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 ssef2 0f d0 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="and">
    <opcode> aso rexr rexx rexb ; 20 ; Eb Gb ; d:alu ; </opcode>
    <opcode> aso oso rexw rexr rexx rexb ; 21 ; Ev Gv ; d:alu ; </opcode>
    <opcode> aso rexr rexx rexb ; 22 ; Gb Eb ; d:alu ; </opcode>
    <opcode> aso oso rexw rexr rexx rexb ; 23 ; Gv Ev ; d:alu ; </opcode>
    <opcode> ; 24 ; AL Ib ; d:alu ; </opcode>
    <opcode> oso rexw ; 25 ; rAX Iz ; d:alu ; </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb ; 80 /4 ; Eb Ib ; d:alu ; </opcode>
    <opcode cast="1" mode="inv64"> aso rexr rexx rexb ; 82 /4 ; Eb Ib ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; 81 /4 ; Ev Iz ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; 83 /4 ; Ev Ib ; d:alu ; </opcode>
  </instruction>

  <instruction mnemonic="andpd">
    <opcode> aso rexr rexx rexb ; sse66 0f 54 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f 54 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="andps">
    <opcode> aso rexr rexx rexb ; 0f 54 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 0f 54 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="andnpd">
    <opcode> aso rexr rexx rexb ; sse66 0f 55 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f 55 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="andnps">
    <opcode> aso rexr rexx rexb ; 0f 55 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 0f 55 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="arpl">
    <opcode mode="inv64"> aso ; 63 /M16 ; Ew Gw ; d:zf ; </opcode>
    <opcode mode="inv64"> aso ; 63 /M32 ; Ew Gw ; d:zf ; </opcode>
  </instruction>

  <instruction mnemonic="movsxd">
    <opcode cast="2"> aso oso rexw rexx rexr rexb ; 63 /M64 ; Gv Ed ; ; </opcode>
  </instruction>

  <instruction mnemonic="bound">
    <opcode mode="inv64"> aso oso ; 62 ; Gv M ; ; </opcode>
  </instruction>

  <instruction mnemonic="bsf">
    <opcode> aso oso rexw rexr rexx rexb ; 0f bc ; Gv Ev ; d:alu ; </opcode>
  </instruction>

  <instruction mnemonic="bsr">
    <opcode> aso oso rexw rexr rexx rexb ; 0f bd ; Gv Ev ; ; </opcode>
  </instruction>

  <instruction mnemonic="bswap">
    <opcode> oso rexw rexb ; 0f c8 ; rAXr8 ; ; </opcode>
    <opcode> oso rexw rexb ; 0f c9 ; rCXr9 ; ; </opcode>
    <opcode> oso rexw rexb ; 0f ca ; rDXr10 ; ; </opcode>
    <opcode> oso rexw rexb ; 0f cb ; rBXr11 ; ; </opcode>
    <opcode> oso rexw rexb ; 0f cc ; rSPr12 ; ; </opcode>
    <opcode> oso rexw rexb ; 0f cd ; rBPr13 ; ; </opcode>
    <opcode> oso rexw rexb ; 0f ce ; rSIr14 ; ; </opcode>
    <opcode> oso rexw rexb ; 0f cf ; rDIr15 ; ; </opcode>
  </instruction>

  <instruction mnemonic="bt">
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; 0F BA /4 ; Ev Ib ; d:alu ; </opcode>
    <opcode> aso oso rexw rexr rexx rexb ; 0f a3 ; Ev Gv ; d:alu ; </opcode>
  </instruction>

  <instruction mnemonic="btc">
    <opcode> aso oso rexw rexr rexx rexb ; 0f bb ; Ev Gv ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; 0F BA /7 ; Ev Ib ; d:alu ; </opcode>
  </instruction>

  <instruction mnemonic="btr">
    <opcode> aso oso rexw rexr rexx rexb ; 0f b3 ; Ev Gv ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; 0F BA /6 ; Ev Ib ; d:alu ; </opcode>
  </instruction>

  <instruction mnemonic="bts">
    <opcode> aso oso rexw rexr rexx rexb ; 0f ab ; Ev Gv ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; 0F BA /5 ; Ev Ib ; d:alu ; </opcode>
  </instruction>

<!-- call definition using a more aggressive set of assumptions about register state that will be affected
  <instruction mnemonic="call">
    <opcode mode="def64" cast="1"> aso oso rexw rexr rexx rexb ; FF /2 ; Ev ; ; u:ax u:sp u:di u:si u:dx u:cx u:8 u:9 u:mm0 u:mm1 u:mm2 u:mm3 u:mm4 u:mm5 u:mm6 u:mm7 d:ax d:dx d:mm0 d:st0 </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; FF /3 ; Ep ; ; u:ax u:sp u:di u:si u:dx u:cx u:8 u:9 u:mm0 u:mm1 u:mm2 u:mm3 u:mm4 u:mm5 u:mm6 u:mm7 d:ax d:dx d:mm0 d:st0 </opcode>
    <opcode mode="def64"> oso ; e8 ; Jz ; ; u:ax u:sp u:di u:si u:dx u:cx u:8 u:9 u:mm0 u:mm1 u:mm2 u:mm3 u:mm4 u:mm5 u:mm6 u:mm7 d:ax d:dx d:mm0 d:st0 </opcode>
    <opcode mode="inv64"> oso ; 9a ; Ap ; ; u:ax u:sp u:di u:si u:dx u:cx u:8 u:9 u:mm0 u:mm1 u:mm2 u:mm3 u:mm4 u:mm5 u:mm6 u:mm7 d:ax d:dx d:mm0 d:st0 </opcode>
  </instruction>
-->

<!--- Old use defs
      u:bx u:bp u:12 u:13 u:14 u:15 u:ax u:sp u:di u:si u:dx u:cx u:8 u:9 u:mm0 u:mm1 u:mm2 u:mm3 u:mm4 u:mm5 u:mm6 u:mm7
      d:ax d:dx d:mm0 d:st0 d:bx d:bp d:12 d:13 d:14 d:15
-->

  <instruction mnemonic="call">
    <opcode mode="def64" cast="1"> aso oso rexw rexr rexx rexb ; FF /2 ; Ev ; ;
      u:ax u:bx u:cx u:dx u:sp u:bp u:si u:di u:8 u:9 u:10      u:mm0 u:mm1 u:mm2 u:mm3 u:mm4 u:mm5 u:mm6 u:mm7
      d:ax d:cx d:dx d:si d:di                d:8 d:9 d:10 d:11 d:mm0 d:mm1 d:mm2 d:mm3 d:mm4 d:mm5 d:mm6 d:mm7 d:st0
    </opcode>

    <opcode cast="1"> aso oso rexw rexr rexx rexb ; FF /3 ; Ep ; ;
      u:ax u:bx u:cx u:dx u:sp u:bp u:si u:di u:8 u:9 u:10      u:mm0 u:mm1 u:mm2 u:mm3 u:mm4 u:mm5 u:mm6 u:mm7
      d:ax d:cx d:dx d:si d:di                d:8 d:9 d:10 d:11 d:mm0 d:mm1 d:mm2 d:mm3 d:mm4 d:mm5 d:mm6 d:mm7 d:st0
    </opcode>

    <opcode mode="def64"> oso ; e8 ; Jz ; ;
      u:ax u:bx u:cx u:dx u:sp u:bp u:si u:di u:8 u:9 u:10      u:mm0 u:mm1 u:mm2 u:mm3 u:mm4 u:mm5 u:mm6 u:mm7
      d:ax d:cx d:dx d:si d:di                d:8 d:9 d:10 d:11 d:mm0 d:mm1 d:mm2 d:mm3 d:mm4 d:mm5 d:mm6 d:mm7 d:st0
    </opcode>

    <opcode mode="inv64"> oso ; 9a ; Ap ; ;
      u:ax u:bx u:cx u:dx u:sp u:bp u:si u:di u:8 u:9 u:10      u:mm0 u:mm1 u:mm2 u:mm3 u:mm4 u:mm5 u:mm6 u:mm7
      d:ax d:cx d:dx d:si d:di                d:8 d:9 d:10 d:11 d:mm0 d:mm1 d:mm2 d:mm3 d:mm4 d:mm5 d:mm6 d:mm7 d:st0
    </opcode>
  </instruction>

  <instruction mnemonic="cbw">
    <opcode> oso rexw ; 98 /O16 ; ; ; u:ax d:ax </opcode>
  </instruction>

  <instruction mnemonic="cwde">
    <opcode> oso rexw ; 98 /O32 ; ; ; u:ax d:ax </opcode>
  </instruction>

  <instruction mnemonic="cdqe">
    <opcode> oso rexw ; 98 /O64 ; ; ; u:ax d:ax </opcode>
  </instruction>

  <instruction mnemonic="clc">
    <opcode> ; f8 ; ; d:cf ; </opcode>
  </instruction>
  
  <instruction mnemonic="cld">
    <opcode> ; fc ; ; d:df ; </opcode>
  </instruction>

  <instruction mnemonic="clflush">
    <opcode> aso rexw rexr rexx rexb ; 0F AE /7 /mod=!11 ; M ; ; </opcode>
  </instruction>

  <instruction mnemonic="clgi">
    <opcode> ; 0F 01 /3 /mod=11 /rm=5 ; ; ; </opcode>
    <vendor> AMD </vendor>
  </instruction>

  <instruction mnemonic="cli">
    <opcode> ; fa ; ; d:if ; </opcode>
  </instruction>

  <instruction mnemonic="clts">
    <opcode> ; 0f 06 ; ; ; </opcode>
  </instruction>

  <instruction mnemonic="cmc">
    <opcode> ; f5 ; ; d:cf ; </opcode>
  </instruction>

  <instruction mnemonic="cmovo">
    <opcode> aso oso rexw rexr rexx rexb ; 0f 40 ; Gv Ev ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="cmovno">
    <opcode> aso oso rexw rexr rexx rexb ; 0f 41 ; Gv Ev ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="cmovb">
    <opcode> aso oso rexw rexr rexx rexb ; 0f 42 ; Gv Ev ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="cmovae">
    <opcode> aso oso rexw rexr rexx rexb ; 0f 43 ; Gv Ev ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="cmovz">
    <opcode> aso oso rexw rexr rexx rexb ; 0f 44 ; Gv Ev ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="cmovnz">
    <opcode> aso oso rexw rexr rexx rexb ; 0f 45 ; Gv Ev ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="cmovbe">
    <opcode> aso oso rexw rexr rexx rexb ; 0f 46 ; Gv Ev ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="cmova">
    <opcode> aso oso rexw rexr rexx rexb ; 0f 47 ; Gv Ev ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="cmovs">
    <opcode> aso oso rexw rexr rexx rexb ; 0f 48 ; Gv Ev ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="cmovns">
    <opcode> aso oso rexw rexr rexx rexb ; 0f 49 ; Gv Ev ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="cmovp">
    <opcode> aso oso rexw rexr rexx rexb ; 0f 4a ; Gv Ev ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="cmovnp">
    <opcode> aso oso rexw rexr rexx rexb ; 0f 4b ; Gv Ev ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="cmovl">
    <opcode> aso oso rexw rexr rexx rexb ; 0f 4c ; Gv Ev ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="cmovge">
    <opcode> aso oso rexw rexr rexx rexb ; 0f 4d ; Gv Ev ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="cmovle">
    <opcode> aso oso rexw rexr rexx rexb ; 0f 4e ; Gv Ev ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="cmovg">
    <opcode> aso oso rexw rexr rexx rexb ; 0f 4f ; Gv Ev ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="cmp">
    <opcode> aso rexr rexx rexb ; 38 ; Eb Gb ; d:alu ; </opcode>
    <opcode> aso oso rexw rexr rexx rexb ; 39 ; Ev Gv ; d:alu ; </opcode>
    <opcode> aso rexr rexx rexb ; 3a ; Gb Eb ; d:alu ; </opcode>
    <opcode> aso oso rexw rexr rexx rexb ; 3b ; Gv Ev ; d:alu ; </opcode>
    <opcode> ; 3c ; AL Ib ; d:alu ; </opcode>
    <opcode> oso rexw ; 3d ; rAX Iz ; d:alu ; </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; 80 /7 ; Eb Ib ; d:alu ; </opcode>
    <opcode cast="1" mode="inv64"> aso rexr rexx rexb ; 82 /7 ; Eb Ib ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; 81 /7 ; Ev Iz ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; 83 /7 ; Ev Ib ; d:alu ; </opcode>
  </instruction>

  <instruction mnemonic="cmppd">
    <opcode> aso rexr rexx rexb ; sse66 0f c2 ; Vx Wx Ib ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f c2 ; V X W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="cmpps">
    <opcode> aso rexr rexx rexb ; 0f c2 ; V W Ib ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 0f c2 ; V X W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="cmpsb">
    <opcode> ; a6 ; ; u:df d:alu ; u:si u:di d:si d:di </opcode>
  </instruction>

  <instruction mnemonic="cmpsw">
    <opcode> oso rexw ; a7 /O16 ; ; u:df d:alu ; u:si u:di d:si d:di </opcode>
  </instruction>

  <instruction mnemonic="cmpsd">
    <opcode> oso rexw ; a7 /O32 ; ; u:df d:alu ; u:si u:di d:si d:di </opcode>
    <opcode> aso rexr rexx rexb ; ssef2 0f c2 ; Vx Wx Ib ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 ssef2 0f c2 ; V X W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="cmpsq">
    <opcode> oso rexw ; a7 /O64 ; ; u:df d:alu ; u:si u:di d:si d:di </opcode>
  </instruction>

  <instruction mnemonic="cmpss">
    <opcode> aso rexr rexx rexb ; ssef3 0f c2 ; V W Ib ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 ssef3 0f c2 ; V X W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="cmpxchg">
    <opcode> aso rexr rexx rexb ; 0f b0 ; Eb Gb ; d:alu ; u:ax d:ax </opcode>
    <opcode> aso oso rexw rexr rexx rexb ; 0f b1 ; Ev Gv ; d:alu ; u:ax d:ax </opcode>
  </instruction>

  <instruction mnemonic="cmpxchg8b">
    <opcode> aso rexr rexx rexb ; 0F C7 /1 ; M ; d:zf ; u:ax u:bx u:cx u:dx d:ax d:dx </opcode>
  </instruction>

  <instruction mnemonic="comisd">
    <opcode> aso rexr rexx rexb ; sse66 0f 2f ; Vx Wx ; d:alu ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f 2f ; V W ; d:alu ; </opcode>
  </instruction>

  <instruction mnemonic="comiss">
    <opcode> aso rexr rexx rexb ; 0f 2f ; Vd Wd ; d:alu ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 0f 2f ; V W ; d:alu ; </opcode>
  </instruction>

  <instruction mnemonic="cpuid">
    <opcode> ; 0f a2 ; ; ; u:ax u:cx d:ax d:bx d:cx d:dx </opcode>
  </instruction>

  <instruction mnemonic="cvtdq2pd">
    <opcode> aso rexr rexx rexb ; ssef3 0f e6 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 ssef3 0f e6 ; V W ; ; </opcode>
  </instruction>

  <instruction mnemonic="cvtdq2ps">
    <opcode> aso rexr rexx rexb ; 0f 5b ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 0f 5b ; V W ; ; </opcode>
  </instruction>

  <instruction mnemonic="cvtpd2dq">
    <opcode> aso rexr rexx rexb ; ssef2 0f e6 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 ssef2 0f e6 ; V W ; ; </opcode>
  </instruction>

  <instruction mnemonic="cvtpd2pi">
    <opcode> aso rexr rexx rexb ; sse66 0f 2d ; P W ; ; </opcode>
  </instruction>

  <instruction mnemonic="cvtpd2ps">
    <opcode> aso rexr rexx rexb ; sse66 0f 5a ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f 5a ; V W ; ; </opcode>
  </instruction>

  <instruction mnemonic="cvtpi2ps">
    <opcode> aso rexr rexx rexb ; 0f 2a ; V Q ; ; </opcode>
  </instruction>

  <instruction mnemonic="cvtpi2pd">
    <opcode> aso rexr rexx rexb ; sse66 0f 2a ; V Q ; ; </opcode>
  </instruction>

  <instruction mnemonic="cvtps2dq">
    <opcode> aso rexr rexx rexb ; sse66 0f 5b ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f 5b ; V W ; ; </opcode>
  </instruction>

  <instruction mnemonic="cvtps2pi">
    <opcode> aso rexr rexx rexb ; 0f 2d ; P W ; ; </opcode>
  </instruction>

  <instruction mnemonic="cvtps2pd">
    <opcode> aso rexr rexx rexb ; 0f 5a ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 0f 5a ; V W ; ; </opcode>
  </instruction>

  <instruction mnemonic="cvtsd2si">
    <opcode cast="1"> aso rexw rexr rexx rexb ; ssef2 0f 2d ; Gvw Wq ; ; </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb vexlig ; avxC4 ssef2 0f 2d ; Gvw W ; ; </opcode>
  </instruction>

  <instruction mnemonic="cvtsd2ss">
    <opcode> aso rexr rexx rexb ; ssef2 0f 5a ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 ssef2 0f 5a ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="cvtsi2ss">
    <opcode cast="2"> aso rexw rexr rexx rexb ; ssef3 0f 2a ; V Ex ; ; </opcode>
    <opcode cast="2"> aso rexw rexr rexx rexb vexlig ; avxC4 ssef3 0f 2a ; V X Ex ; ; </opcode>
  </instruction>

  <instruction mnemonic="cvtss2si">
    <opcode cast="1"> aso rexw rexr rexx rexb ; ssef3 0f 2d ; Gvw W ; ; </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb vexlig ; avxC4 ssef3 0f 2d ; Gvw W ; ; </opcode>
  </instruction>

  <instruction mnemonic="cvtss2sd">
    <opcode> aso rexr rexx rexb ; ssef3 0f 5a ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 ssef3 0f 5a ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="cvttpd2pi">
    <opcode> aso rexr rexx rexb ; sse66 0f 2c ; P W ; ; </opcode>
  </instruction>

  <instruction mnemonic="cvttpd2dq">
    <opcode> ; sse66 0f e6 ; Vx Wx ; ; </opcode>
    <opcode> ; avxC4 sse66 0f e6 ; V W ; ; </opcode>
  </instruction>

  <instruction mnemonic="cvttps2dq">
    <opcode> aso rexr rexx rexb ; ssef3 0f 5b ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 ssef3 0f 5b ; V W ; ; </opcode>
  </instruction>

  <instruction mnemonic="cvttps2pi">
    <opcode> aso rexr rexx rexb ; 0f 2c ; P W ; ; </opcode>
  </instruction>

  <instruction mnemonic="cvttsd2si">
    <opcode cast="1"> aso rexw rexr rexx rexb ; ssef2 0f 2c ; Gvw Wq ; ; </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb vexlig ; avxC4 ssef2 0f 2c ; Gvw W ; ; </opcode>
  </instruction>

  <instruction mnemonic="cvtsi2sd">
    <opcode cast="2"> aso rexw rexr rexx rexb ; ssef2 0f 2a ; Vx Ex ; ; </opcode>
    <opcode cast="2"> aso rexw rexr rexx rexb vexlig ; avxC4 ssef2 0f 2a ; V X Ex ; ; </opcode>
  </instruction>

  <instruction mnemonic="cvttss2si">
    <opcode cast="1"> aso rexw rexr rexx rexb ; ssef3 0f 2c ; Gvw W ; ; </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb vexlig ; avxC4 ssef3 0f 2c ; Gvw W ; ; </opcode>
  </instruction>

  <instruction mnemonic="cwd">
    <opcode> oso rexw ; 99 /O16 ; ; ; u:ax d:ax d:dx </opcode>
  </instruction>

  <instruction mnemonic="cdq">
    <opcode> oso rexw ; 99 /O32 ; ; ; u:ax d:ax d:dx </opcode>
  </instruction>

  <instruction mnemonic="cqo">
    <opcode> oso rexw ; 99 /O64 ; ; ; u:ax d:ax d:dx </opcode>
  </instruction>

  <instruction mnemonic="daa">
    <opcode mode="inv64"> ; 27 ; ; u:af u:cf d:alu ; u:ax d:ax </opcode>
  </instruction>

  <instruction mnemonic="das">
    <opcode mode="inv64"> ; 2f ; ; u:af u:cf d:alu ; u:ax d:ax </opcode>
  </instruction>

  <instruction mnemonic="dec">
    <opcode> oso ; 48 ; eAX ; d:of d:sf d:zf d:af d:pf ; </opcode>
    <opcode> oso ; 49 ; eCX ; d:of d:sf d:zf d:af d:pf ; </opcode>
    <opcode> oso ; 4a ; eDX ; d:of d:sf d:zf d:af d:pf ; </opcode>
    <opcode> oso ; 4b ; eBX ; d:of d:sf d:zf d:af d:pf ; </opcode>
    <opcode> oso ; 4c ; eSP ; d:of d:sf d:zf d:af d:pf ; </opcode>
    <opcode> oso ; 4d ; eBP ; d:of d:sf d:zf d:af d:pf ; </opcode>
    <opcode> oso ; 4e ; eSI ; d:of d:sf d:zf d:af d:pf ; </opcode>
    <opcode> oso ; 4f ; eDI ; d:of d:sf d:zf d:af d:pf ; </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb ; FE /1 ; Eb ; d:of d:sf d:zf d:af d:pf ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; FF /1 ; Ev ; d:of d:sf d:zf d:af d:pf ; </opcode>
  </instruction>

  <instruction mnemonic="div">
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; F7 /6 ; Ev ; u:af u:cf d:alu ; u:ax u:dx d:ax d:dx </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb ; F6 /6 ; Eb ; u:af u:cf d:alu ; u:ax d:ax </opcode>
  </instruction>

  <instruction mnemonic="divpd">
    <opcode> aso rexr rexx rexb ; sse66 0f 5e ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f 5e ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="divps">
    <opcode> aso rexr rexx rexb ; 0f 5e ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 0f 5e ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="divsd">
    <opcode> aso rexr rexx rexb ; ssef2 0f 5e ; Vq Wq ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 ssef2 0f 5e ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="divss">
    <opcode> aso rexr rexx rexb ; ssef3 0f 5e ; Vd Wd ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 ssef3 0f 5e ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="emms">
    <opcode> ; 0f 77 ; ; ; </opcode>
  </instruction>

  <instruction mnemonic="enter">
    <opcode mode="def64 depM"> ; c8 ; Iw Ib ; ; u:bp u:sp d:bp d:sp </opcode>
  </instruction>

  <instruction mnemonic="f2xm1">
    <opcode> ; 0F D9 /mod=11 /x87=30 ; ; ; u:st0 d:st0 </opcode>
    <class> X87 </class>
  </instruction>

  <!-- TODO: fxtract -->

  <instruction mnemonic="fabs">
    <opcode> ; D9 /mod=11 /x87=21 ; ; ; u:st0 d:st0 </opcode>
    <opcode> ; 0F D9 /mod=11 /x87=21 ; ; ; u:st0 d:st0 </opcode>
   <class> X87 </class>
  </instruction>

  <instruction mnemonic="fadd">
    <class> X87 </class>
    <opcode cast="1"> aso rexr rexx rexb ; DC /mod=!11 /0 ; Mq ; ; u:st0 d:st0 </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; D8 /mod=!11 /0 ; Md ; ; u:st0 d:st0 </opcode>
    <opcode> ; DC /mod=11 /x87=00 ; ST0 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=01 ; ST1 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=02 ; ST2 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=03 ; ST3 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=04 ; ST4 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=05 ; ST5 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=06 ; ST6 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=07 ; ST7 ST0 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=00 ; ST0 ST0 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=01 ; ST0 ST1 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=02 ; ST0 ST2 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=03 ; ST0 ST3 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=04 ; ST0 ST4 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=05 ; ST0 ST5 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=06 ; ST0 ST6 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=07 ; ST0 ST7 ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="faddp">
    <opcode> ; DE /mod=11 /x87=00 ; ST0 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=01 ; ST1 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=02 ; ST2 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=03 ; ST3 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=04 ; ST4 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=05 ; ST5 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=06 ; ST6 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=07 ; ST7 ST0 ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fbld">
    <class> X87 </class>
    <opcode> aso rexr rexx rexb ; DF /mod=!11 /4 ; Mt ; ; </opcode>
  </instruction>

  <instruction mnemonic="fbstp">
    <class> X87 </class>
    <opcode> aso rexr rexx rexb ; DF /mod=!11 /6 ; Mt ; ; </opcode>
  </instruction>

  <instruction mnemonic="fchs">
    <class> X87 </class>
    <opcode> ; D9 /mod=11 /x87=20 ; ; ; u:st0 d:st0 </opcode>
  </instruction>

  <instruction mnemonic="fclex">
    <opcode> ; DB /mod=11 /x87=22 ; ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fcmovb">
    <opcode> ; DA /mod=11 /x87=00 ; ST0 ST0 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DA /mod=11 /x87=01 ; ST0 ST1 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DA /mod=11 /x87=02 ; ST0 ST2 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DA /mod=11 /x87=03 ; ST0 ST3 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DA /mod=11 /x87=04 ; ST0 ST4 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DA /mod=11 /x87=05 ; ST0 ST5 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DA /mod=11 /x87=06 ; ST0 ST6 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DA /mod=11 /x87=07 ; ST0 ST7 ; u:zf u:pf u:cf ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fcmove">
    <opcode> ; DA /mod=11 /x87=08 ; ST0 ST0 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DA /mod=11 /x87=09 ; ST0 ST1 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DA /mod=11 /x87=0A ; ST0 ST2 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DA /mod=11 /x87=0B ; ST0 ST3 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DA /mod=11 /x87=0C ; ST0 ST4 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DA /mod=11 /x87=0D ; ST0 ST5 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DA /mod=11 /x87=0E ; ST0 ST6 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DA /mod=11 /x87=0F ; ST0 ST7 ; u:zf u:pf u:cf ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fcmovbe">
    <opcode> ; DA /mod=11 /x87=10 ; ST0 ST0 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DA /mod=11 /x87=11 ; ST0 ST1 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DA /mod=11 /x87=12 ; ST0 ST2 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DA /mod=11 /x87=13 ; ST0 ST3 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DA /mod=11 /x87=14 ; ST0 ST4 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DA /mod=11 /x87=15 ; ST0 ST5 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DA /mod=11 /x87=16 ; ST0 ST6 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DA /mod=11 /x87=17 ; ST0 ST7 ; u:zf u:pf u:cf ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fcmovu">
    <opcode> ; DA /mod=11 /x87=18 ; ST0 ST0 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DA /mod=11 /x87=19 ; ST0 ST1 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DA /mod=11 /x87=1A ; ST0 ST2 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DA /mod=11 /x87=1B ; ST0 ST3 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DA /mod=11 /x87=1C ; ST0 ST4 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DA /mod=11 /x87=1D ; ST0 ST5 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DA /mod=11 /x87=1E ; ST0 ST6 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DA /mod=11 /x87=1F ; ST0 ST7 ; u:zf u:pf u:cf ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fcmovnb">
    <opcode> ; DB /mod=11 /x87=00 ; ST0 ST0 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=01 ; ST0 ST1 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=02 ; ST0 ST2 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=03 ; ST0 ST3 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=04 ; ST0 ST4 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=05 ; ST0 ST5 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=06 ; ST0 ST6 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=07 ; ST0 ST7 ; u:zf u:pf u:cf ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fcmovne">
    <opcode> ; DB /mod=11 /x87=08 ; ST0 ST0 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=09 ; ST0 ST1 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=0A ; ST0 ST2 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=0B ; ST0 ST3 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=0C ; ST0 ST4 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=0D ; ST0 ST5 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=0E ; ST0 ST6 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=0F ; ST0 ST7 ; u:zf u:pf u:cf ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fcmovnbe">
    <opcode> ; DB /mod=11 /x87=10 ; ST0 ST0 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=11 ; ST0 ST1 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=12 ; ST0 ST2 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=13 ; ST0 ST3 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=14 ; ST0 ST4 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=15 ; ST0 ST5 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=16 ; ST0 ST6 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=17 ; ST0 ST7 ; u:zf u:pf u:cf ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fcmovnu">
    <opcode> ; DB /mod=11 /x87=18 ; ST0 ST0 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=19 ; ST0 ST1 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=1A ; ST0 ST2 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=1B ; ST0 ST3 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=1C ; ST0 ST4 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=1D ; ST0 ST5 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=1E ; ST0 ST6 ; u:zf u:pf u:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=1F ; ST0 ST7 ; u:zf u:pf u:cf ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fucomi">
    <opcode> ; DB /mod=11 /x87=28 ; ST0 ST0 ; d:zf d:pf d:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=29 ; ST0 ST1 ; d:zf d:pf d:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=2A ; ST0 ST2 ; d:zf d:pf d:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=2B ; ST0 ST3 ; d:zf d:pf d:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=2C ; ST0 ST4 ; d:zf d:pf d:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=2D ; ST0 ST5 ; d:zf d:pf d:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=2E ; ST0 ST6 ; d:zf d:pf d:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=2F ; ST0 ST7 ; d:zf d:pf d:cf ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fcom">
    <opcode cast="1"> aso rexr rexx rexb ; D8 /mod=!11 /2 ; Md ; ; u:st0 </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; DC /mod=!11 /2 ; Mq ; ; u:st0 </opcode>
    <opcode> ; D8 /mod=11 /x87=10 ; ST0 ST0 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=11 ; ST0 ST1 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=12 ; ST0 ST2 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=13 ; ST0 ST3 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=14 ; ST0 ST4 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=15 ; ST0 ST5 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=16 ; ST0 ST6 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=17 ; ST0 ST7 ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <!-- TODO: not in the intel manual -->
  <instruction mnemonic="fcom2">
    <opcode> ; DC /mod=11 /x87=10 ; ST0 ; ; u:st0 </opcode>
    <opcode> ; DC /mod=11 /x87=11 ; ST1 ; ; u:st0 </opcode>
    <opcode> ; DC /mod=11 /x87=12 ; ST2 ; ; u:st0 </opcode>
    <opcode> ; DC /mod=11 /x87=13 ; ST3 ; ; u:st0 </opcode>
    <opcode> ; DC /mod=11 /x87=14 ; ST4 ; ; u:st0 </opcode>
    <opcode> ; DC /mod=11 /x87=15 ; ST5 ; ; u:st0 </opcode>
    <opcode> ; DC /mod=11 /x87=16 ; ST6 ; ; u:st0 </opcode>
    <opcode> ; DC /mod=11 /x87=17 ; ST7 ; ; u:st0 </opcode>
    <class> X87 UNDOC </class>
  </instruction>

  <!-- TODO: not in the intel manual. assume it touches SP -->
  <instruction mnemonic="fcomp3">
    <opcode> ; DC /mod=11 /x87=18 ; ST0 ; ; u:st0 u:sp d:sp </opcode>
    <opcode> ; DC /mod=11 /x87=19 ; ST1 ; ; u:st0 u:sp d:sp </opcode>
    <opcode> ; DC /mod=11 /x87=1A ; ST2 ; ; u:st0 u:sp d:sp </opcode>
    <opcode> ; DC /mod=11 /x87=1B ; ST3 ; ; u:st0 u:sp d:sp </opcode>
    <opcode> ; DC /mod=11 /x87=1C ; ST4 ; ; u:st0 u:sp d:sp </opcode>
    <opcode> ; DC /mod=11 /x87=1D ; ST5 ; ; u:st0 u:sp d:sp </opcode>
    <opcode> ; DC /mod=11 /x87=1E ; ST6 ; ; u:st0 u:sp d:sp </opcode>
    <opcode> ; DC /mod=11 /x87=1F ; ST7 ; ; u:st0 u:sp d:sp </opcode>
    <class> X87 UNDOC </class>
  </instruction>

  <instruction mnemonic="fcomi">
    <opcode> ; DB /mod=11 /x87=30 ; ST0 ST0 ; d:zf d:pf d:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=31 ; ST0 ST1 ; d:zf d:pf d:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=32 ; ST0 ST2 ; d:zf d:pf d:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=33 ; ST0 ST3 ; d:zf d:pf d:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=34 ; ST0 ST4 ; d:zf d:pf d:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=35 ; ST0 ST5 ; d:zf d:pf d:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=36 ; ST0 ST6 ; d:zf d:pf d:cf ; </opcode>
    <opcode> ; DB /mod=11 /x87=37 ; ST0 ST7 ; d:zf d:pf d:cf ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fucomip">
    <opcode> ; DF /mod=11 /x87=28 ; ST0 ST0 ; d:zf d:pf d:cf ; u:sp d:sp </opcode>
    <opcode> ; DF /mod=11 /x87=29 ; ST0 ST1 ; d:zf d:pf d:cf ; u:sp d:sp </opcode>
    <opcode> ; DF /mod=11 /x87=2A ; ST0 ST2 ; d:zf d:pf d:cf ; u:sp d:sp </opcode>
    <opcode> ; DF /mod=11 /x87=2B ; ST0 ST3 ; d:zf d:pf d:cf ; u:sp d:sp </opcode>
    <opcode> ; DF /mod=11 /x87=2C ; ST0 ST4 ; d:zf d:pf d:cf ; u:sp d:sp </opcode>
    <opcode> ; DF /mod=11 /x87=2D ; ST0 ST5 ; d:zf d:pf d:cf ; u:sp d:sp </opcode>
    <opcode> ; DF /mod=11 /x87=2E ; ST0 ST6 ; d:zf d:pf d:cf ; u:sp d:sp </opcode>
    <opcode> ; DF /mod=11 /x87=2F ; ST0 ST7 ; d:zf d:pf d:cf ; u:sp d:sp </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fcomip">
    <opcode> ; DF /mod=11 /x87=30 ; ST0 ST0 ; d:zf d:pf d:cf ; u:sp d:sp </opcode>
    <opcode> ; DF /mod=11 /x87=31 ; ST0 ST1 ; d:zf d:pf d:cf ; u:sp d:sp </opcode>
    <opcode> ; DF /mod=11 /x87=32 ; ST0 ST2 ; d:zf d:pf d:cf ; u:sp d:sp </opcode>
    <opcode> ; DF /mod=11 /x87=33 ; ST0 ST3 ; d:zf d:pf d:cf ; u:sp d:sp </opcode>
    <opcode> ; DF /mod=11 /x87=34 ; ST0 ST4 ; d:zf d:pf d:cf ; u:sp d:sp </opcode>
    <opcode> ; DF /mod=11 /x87=35 ; ST0 ST5 ; d:zf d:pf d:cf ; u:sp d:sp </opcode>
    <opcode> ; DF /mod=11 /x87=36 ; ST0 ST6 ; d:zf d:pf d:cf ; u:sp d:sp </opcode>
    <opcode> ; DF /mod=11 /x87=37 ; ST0 ST7 ; d:zf d:pf d:cf ; u:sp d:sp </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fcomp">
    <opcode cast="1"> aso rexr rexx rexb ; D8 /mod=!11 /3 ; Md ; ; u:st0 u:sp d:sp </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; DC /mod=!11 /3 ; Mq ; ; u:st0 u:sp d:sp </opcode>
    <opcode> ; D8 /mod=11 /x87=18 ; ST0 ST0 ; ; u:sp d:sp </opcode>
    <opcode> ; D8 /mod=11 /x87=19 ; ST0 ST1 ; ; u:sp d:sp </opcode>
    <opcode> ; D8 /mod=11 /x87=1A ; ST0 ST2 ; ; u:sp d:sp </opcode>
    <opcode> ; D8 /mod=11 /x87=1B ; ST0 ST3 ; ; u:sp d:sp </opcode>
    <opcode> ; D8 /mod=11 /x87=1C ; ST0 ST4 ; ; u:sp d:sp </opcode>
    <opcode> ; D8 /mod=11 /x87=1D ; ST0 ST5 ; ; u:sp d:sp </opcode>
    <opcode> ; D8 /mod=11 /x87=1E ; ST0 ST6 ; ; u:sp d:sp </opcode>
    <opcode> ; D8 /mod=11 /x87=1F ; ST0 ST7 ; ; u:sp d:sp </opcode>
    <class> X87 </class>
  </instruction>

  <!-- TODO: not in the intel manual. assume it touches SP -->
  <instruction mnemonic="fcomp5">
    <opcode> ; DE /mod=11 /x87=10 ; ST0 ; ; u:st0 u:sp d:sp </opcode>
    <opcode> ; DE /mod=11 /x87=11 ; ST1 ; ; u:st0 u:sp d:sp </opcode>
    <opcode> ; DE /mod=11 /x87=12 ; ST2 ; ; u:st0 u:sp d:sp </opcode>
    <opcode> ; DE /mod=11 /x87=13 ; ST3 ; ; u:st0 u:sp d:sp </opcode>
    <opcode> ; DE /mod=11 /x87=14 ; ST4 ; ; u:st0 u:sp d:sp </opcode>
    <opcode> ; DE /mod=11 /x87=15 ; ST5 ; ; u:st0 u:sp d:sp </opcode>
    <opcode> ; DE /mod=11 /x87=16 ; ST6 ; ; u:st0 u:sp d:sp </opcode>
    <opcode> ; DE /mod=11 /x87=17 ; ST7 ; ; u:st0 u:sp d:sp </opcode>
    <class> X87 UNDOC </class>
  </instruction>

  <instruction mnemonic="fcompp">
    <opcode> ; DE /mod=11 /x87=19 ; ; ; u:st0 u:st1 u:sp d:sp </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fcos">
    <opcode> ; D9 /mod=11 /x87=3F ; ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fdecstp">
    <opcode> ; D9 /mod=11 /x87=36 ; ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fdiv">
    <opcode cast="1"> aso rexr rexx rexb ; DC /mod=!11 /6 ; Mq ; ; u:st0 d:st0 </opcode>
    <opcode> ; DC /mod=11 /x87=38 ; ST0 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=39 ; ST1 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=3A ; ST2 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=3B ; ST3 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=3C ; ST4 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=3D ; ST5 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=3E ; ST6 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=3F ; ST7 ST0 ; ; </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; D8 /mod=!11 /6 ; Md ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=30 ; ST0 ST0 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=31 ; ST0 ST1 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=32 ; ST0 ST2 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=33 ; ST0 ST3 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=34 ; ST0 ST4 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=35 ; ST0 ST5 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=36 ; ST0 ST6 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=37 ; ST0 ST7 ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fdivp">
    <opcode> ; DE /mod=11 /x87=38 ; ST0 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=39 ; ST1 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=3A ; ST2 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=3B ; ST3 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=3C ; ST4 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=3D ; ST5 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=3E ; ST6 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=3F ; ST7 ST0 ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fdivr">
    <opcode cast="1"> aso rexr rexx rexb ; DC /mod=!11 /7 ; Mq ; ; u:st0 d:st0 </opcode>
    <opcode> ; DC /mod=11 /x87=30 ; ST0 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=31 ; ST1 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=32 ; ST2 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=33 ; ST3 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=34 ; ST4 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=35 ; ST5 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=36 ; ST6 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=37 ; ST7 ST0 ; ; </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; D8 /mod=!11 /7 ; Md ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=38 ; ST0 ST0 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=39 ; ST0 ST1 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=3A ; ST0 ST2 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=3B ; ST0 ST3 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=3C ; ST0 ST4 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=3D ; ST0 ST5 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=3E ; ST0 ST6 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=3F ; ST0 ST7 ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fdivrp">
    <opcode> ; DE /mod=11 /x87=30 ; ST0 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=31 ; ST1 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=32 ; ST2 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=33 ; ST3 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=34 ; ST4 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=35 ; ST5 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=36 ; ST6 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=37 ; ST7 ST0 ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="femms">
    <opcode> ; 0f 0e ; ; ; </opcode>
  </instruction>

  <instruction mnemonic="ffree">
    <opcode> ; DD /mod=11 /x87=00 ; ST0 ; ; </opcode>
    <opcode> ; DD /mod=11 /x87=01 ; ST1 ; ; </opcode>
    <opcode> ; DD /mod=11 /x87=02 ; ST2 ; ; </opcode>
    <opcode> ; DD /mod=11 /x87=03 ; ST3 ; ; </opcode>
    <opcode> ; DD /mod=11 /x87=04 ; ST4 ; ; </opcode>
    <opcode> ; DD /mod=11 /x87=05 ; ST5 ; ; </opcode>
    <opcode> ; DD /mod=11 /x87=06 ; ST6 ; ; </opcode>
    <opcode> ; DD /mod=11 /x87=07 ; ST7 ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="ffreep">
    <opcode> ; DF /mod=11 /x87=00 ; ST0 ; ; </opcode>
    <opcode> ; DF /mod=11 /x87=01 ; ST1 ; ; </opcode>
    <opcode> ; DF /mod=11 /x87=02 ; ST2 ; ; </opcode>
    <opcode> ; DF /mod=11 /x87=03 ; ST3 ; ; </opcode>
    <opcode> ; DF /mod=11 /x87=04 ; ST4 ; ; </opcode>
    <opcode> ; DF /mod=11 /x87=05 ; ST5 ; ; </opcode>
    <opcode> ; DF /mod=11 /x87=06 ; ST6 ; ; </opcode>
    <opcode> ; DF /mod=11 /x87=07 ; ST7 ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="ficom">
    <opcode cast="1"> aso rexr rexx rexb ; DE /mod=!11 /2 ; Mw ; ; </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; DA /mod=!11 /2 ; Md ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="ficomp">
    <opcode cast="1"> aso rexr rexx rexb ; DE /mod=!11 /3 ; Mw ; ; </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; DA /mod=!11 /3 ; Md ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fild">
    <opcode cast="1"> aso rexr rexx rexb ; DF /mod=!11 /0 ; Mw ; ; </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; DF /mod=!11 /5 ; Mq ; ; </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; DB /mod=!11 /0 ; Md ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fncstp">
    <opcode> ; D9 /mod=11 /x87=37 ; ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fninit">
    <opcode> ; DB /mod=11 /x87=23 ; ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fiadd">
    <opcode cast="1"> aso rexr rexx rexb ; DA /mod=!11 /0 ; Md ; ; u:st0 d:st0 </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; DE /mod=!11 /0 ; Mw ; ; u:st0 d:st0 </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fidivr">
    <opcode cast="1"> aso rexr rexx rexb ; DA /mod=!11 /7 ; Md ; ; u:st0 d:st0 </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; DE /mod=!11 /7 ; Mw ; ; u:st0 d:st0 </opcode>
    <class> X87 </class>
  </instruction>

  <!-- TODO does fidiv actually define flags? -->
  <instruction mnemonic="fidiv">
    <opcode cast="1"> aso rexr rexx rexb ; DA /mod=!11 /6 ; Md ; d:alu ; u:st0 d:st0 </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; DE /mod=!11 /6 ; Mw ; d:alu ; u:st0 d:st0 </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fisub">
    <opcode cast="1"> aso rexr rexx rexb ; DA /mod=!11 /4 ; Md ; ; u:st0 d:st0 </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; DE /mod=!11 /4 ; Mw ; ; u:st0 d:st0 </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fisubr">
    <opcode cast="1"> aso rexr rexx rexb ; DA /mod=!11 /5 ; Md ; ; u:st0 d:st0 </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; DE /mod=!11 /5 ; Mw ; ; u:st0 d:st0 </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fist">
    <opcode cast="1"> aso rexr rexx rexb ; DF /mod=!11 /2 ; Mw ; ; u:st0 </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; DB /mod=!11 /2 ; Md ; ; u:st0 </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fistp">
    <opcode cast="1"> aso rexr rexx rexb ; DF /mod=!11 /3 ; Mw ; ; u:st0 </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; DF /mod=!11 /7 ; Mq ; ; u:st0 </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; DB /mod=!11 /3 ; Md ; ; u:st0 </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fisttp">
    <opcode cast="1"> aso rexr rexx rexb ; DB /mod=!11 /1 ; Md ; ; u:st0 </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; DD /mod=!11 /1 ; Mq ; ; u:st0 </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; DF /mod=!11 /1 ; Mw ; ; u:st0 </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fld">
    <opcode cast="1"> aso rexr rexx rexb ; DB /mod=!11 /5 ; Mt ; ; </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; DD /mod=!11 /0 ; Mq ; ; </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; D9 /mod=!11 /0 ; Md ; ; </opcode>
    <opcode> ; D9 /mod=11 /x87=00 ; ST0 ST0 ; ; </opcode>
    <opcode> ; D9 /mod=11 /x87=01 ; ST0 ST1 ; ; </opcode>
    <opcode> ; D9 /mod=11 /x87=02 ; ST0 ST2 ; ; </opcode>
    <opcode> ; D9 /mod=11 /x87=03 ; ST0 ST3 ; ; </opcode>
    <opcode> ; D9 /mod=11 /x87=04 ; ST0 ST4 ; ; </opcode>
    <opcode> ; D9 /mod=11 /x87=05 ; ST0 ST5 ; ; </opcode>
    <opcode> ; D9 /mod=11 /x87=06 ; ST0 ST6 ; ; </opcode>
    <opcode> ; D9 /mod=11 /x87=07 ; ST0 ST7 ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fld1">
    <opcode> ; D9 /mod=11 /x87=28 ; ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fldl2t">
    <opcode> ; D9 /mod=11 /x87=29 ; ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fldl2e">
    <opcode> ; D9 /mod=11 /x87=2A ; ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fldlpi">
    <opcode> ; D9 /mod=11 /x87=2B ;; ; </opcode>
     <class> X87 </class>
  </instruction>

  <instruction mnemonic="fldlg2">
    <opcode> ; D9 /mod=11 /x87=2C ; ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fldln2">
    <opcode> ; D9 /mod=11 /x87=2D ; ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fldz">
    <opcode> ; D9 /mod=11 /x87=2E ; ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fldcw">
    <opcode cast="1"> aso rexr rexx rexb ; D9 /mod=!11 /5 ; Mw ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fldenv">
    <opcode> aso rexr rexx rexb ; D9 /mod=!11 /4 ; M ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fmul">
    <opcode cast="1"> aso rexr rexx rexb ; DC /mod=!11 /1 ; Mq ; ; u:st0 d:st0 </opcode>
    <opcode> ; DC /mod=11 /x87=08 ; ST0 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=09 ; ST1 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=0A ; ST2 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=0B ; ST3 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=0C ; ST4 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=0D ; ST5 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=0E ; ST6 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=0F ; ST7 ST0 ; ; </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; D8 /mod=!11 /1 ; Md ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=08 ; ST0 ST0 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=09 ; ST0 ST1 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=0A ; ST0 ST2 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=0B ; ST0 ST3 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=0C ; ST0 ST4 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=0D ; ST0 ST5 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=0E ; ST0 ST6 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=0F ; ST0 ST7 ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fmulp">
    <opcode> ; DE /mod=11 /x87=08 ; ST0 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=09 ; ST1 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=0A ; ST2 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=0B ; ST3 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=0C ; ST4 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=0D ; ST5 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=0E ; ST6 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=0F ; ST7 ST0 ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <!-- TODO does fimul actually define flags? -->
  <instruction mnemonic="fimul">
    <opcode cast="1"> aso rexr rexx rexb ; DA /mod=!11 /1 ; Md ; d:alu ; u:ax d:ax d:dx </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; DE /mod=!11 /1 ; Mw ; d:alu ; u:ax d:ax d:dx </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fnop">
    <opcode> ; D9 /mod=11 /x87=10 ; ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fpatan">
    <opcode> ; D9 /mod=11 /x87=33 ; ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fprem">
    <opcode> ; D9 /mod=11 /x87=38 ; ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fprem1">
    <opcode> ; D9 /mod=11 /x87=35 ; ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fptan">
    <opcode> ; D9 /mod=11 /x87=32 ; ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="frndint">
    <opcode> ; D9 /mod=11 /x87=3C ; ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="frstor">
    <opcode> aso rexr rexx rexb ; DD /mod=!11 /4 ; M ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fnsave">
    <opcode> aso rexr rexx rexb ; DD /mod=!11 /6 ; M ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fscale">
    <opcode> ; D9 /mod=11 /x87=3D ; ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fsin">
    <opcode> ; D9 /mod=11 /x87=3E ; ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fsincos">
    <opcode> ; D9 /mod=11 /x87=3B ;  ; ; </opcode>
   <class> X87 </class>
  </instruction>

  <instruction mnemonic="fsqrt">
    <opcode> ; D9 /mod=11 /x87=3A ; ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fstp">
    <opcode cast="1"> aso rexr rexx rexb ; DB /mod=!11 /7 ; Mt ; ; u:st0 </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; DD /mod=!11 /3 ; Mq ; ; u:st0 </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; D9 /mod=!11 /3 ; Md ; ; u:st0 </opcode>
    <opcode> ; DD /mod=11 /x87=18 ; ST0 ; ; u:st0 </opcode>
    <opcode> ; DD /mod=11 /x87=19 ; ST1 ; ; u:st0 </opcode>
    <opcode> ; DD /mod=11 /x87=1A ; ST2 ; ; u:st0 </opcode>
    <opcode> ; DD /mod=11 /x87=1B ; ST3 ; ; u:st0 </opcode>
    <opcode> ; DD /mod=11 /x87=1C ; ST4 ; ; u:st0 </opcode>
    <opcode> ; DD /mod=11 /x87=1D ; ST5 ; ; u:st0 </opcode>
    <opcode> ; DD /mod=11 /x87=1E ; ST6 ; ; u:st0 </opcode>
    <opcode> ; DD /mod=11 /x87=1F ; ST7 ; ; u:st0 </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fstp1">
    <opcode> ; D9 /mod=11 /x87=18 ; ST0 ; ; u:st0 </opcode>
    <opcode> ; D9 /mod=11 /x87=19 ; ST1 ; ; u:st0 </opcode>
    <opcode> ; D9 /mod=11 /x87=1A ; ST2 ; ; u:st0 </opcode>
    <opcode> ; D9 /mod=11 /x87=1B ; ST3 ; ; u:st0 </opcode>
    <opcode> ; D9 /mod=11 /x87=1C ; ST4 ; ; u:st0 </opcode>
    <opcode> ; D9 /mod=11 /x87=1D ; ST5 ; ; u:st0 </opcode>
    <opcode> ; D9 /mod=11 /x87=1E ; ST6 ; ; u:st0 </opcode>
    <opcode> ; D9 /mod=11 /x87=1F ; ST7 ; ; u:st0 </opcode>
  </instruction>

  <instruction mnemonic="fstp8">
    <opcode> ; DF /mod=11 /x87=10 ; ST0 ; ; u:st0 </opcode>
    <opcode> ; DF /mod=11 /x87=11 ; ST1 ; ; u:st0 </opcode>
    <opcode> ; DF /mod=11 /x87=12 ; ST2 ; ; u:st0 </opcode>
    <opcode> ; DF /mod=11 /x87=13 ; ST3 ; ; u:st0 </opcode>
    <opcode> ; DF /mod=11 /x87=14 ; ST4 ; ; u:st0 </opcode>
    <opcode> ; DF /mod=11 /x87=15 ; ST5 ; ; u:st0 </opcode>
    <opcode> ; DF /mod=11 /x87=16 ; ST6 ; ; u:st0 </opcode>
    <opcode> ; DF /mod=11 /x87=17 ; ST7 ; ; u:st0 </opcode>
  </instruction>

  <instruction mnemonic="fstp9">
    <opcode> ; DF /mod=11 /x87=18 ; ST0 ; ; u:st0 </opcode>
    <opcode> ; DF /mod=11 /x87=19 ; ST1 ; ; u:st0 </opcode>
    <opcode> ; DF /mod=11 /x87=1A ; ST2 ; ; u:st0 </opcode>
    <opcode> ; DF /mod=11 /x87=1B ; ST3 ; ; u:st0 </opcode>
    <opcode> ; DF /mod=11 /x87=1C ; ST4 ; ; u:st0 </opcode>
    <opcode> ; DF /mod=11 /x87=1D ; ST5 ; ; u:st0 </opcode>
    <opcode> ; DF /mod=11 /x87=1E ; ST6 ; ; u:st0 </opcode>
    <opcode> ; DF /mod=11 /x87=1F ; ST7 ; ; u:st0 </opcode>
  </instruction>

  <instruction mnemonic="fst">
    <opcode cast="1"> aso rexr rexx rexb ; D9 /mod=!11 /2 ; Md ; ; u:st0 </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; DD /mod=!11 /2 ; Mq ; ; u:st0 </opcode>
    <opcode> ; DD /mod=11 /x87=10 ; ST0 ; ; u:st0 </opcode>
    <opcode> ; DD /mod=11 /x87=11 ; ST1 ; ; u:st0 </opcode>
    <opcode> ; DD /mod=11 /x87=12 ; ST2 ; ; u:st0 </opcode>
    <opcode> ; DD /mod=11 /x87=13 ; ST3 ; ; u:st0 </opcode>
    <opcode> ; DD /mod=11 /x87=14 ; ST4 ; ; u:st0 </opcode>
    <opcode> ; DD /mod=11 /x87=15 ; ST5 ; ; u:st0 </opcode>
    <opcode> ; DD /mod=11 /x87=16 ; ST6 ; ; u:st0 </opcode>
    <opcode> ; DD /mod=11 /x87=17 ; ST7 ; ; u:st0 </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fnstcw">
    <opcode cast="1"> aso rexr rexx rexb ; D9 /mod=!11 /7 ; Mw ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fnstenv">
    <opcode> aso rexr rexx rexb ; D9 /mod=!11 /6 ; M ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fnstsw">
    <opcode cast="1"> aso rexr rexx rexb ; DD /mod=!11 /7 ; Mw ; ; </opcode>
    <opcode> ; DF /mod=11 /x87=20 ; AX ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fsub">
    <opcode cast="1"> aso rexr rexx rexb ; D8 /mod=!11 /4 ; Md ; ; u:st0 d:st0 </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; DC /mod=!11 /4 ; Mq ; ; u:st0 d:st0 </opcode>
    <opcode> ; D8 /mod=11 /x87=20 ; ST0 ST0 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=21 ; ST0 ST1 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=22 ; ST0 ST2 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=23 ; ST0 ST3 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=24 ; ST0 ST4 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=25 ; ST0 ST5 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=26 ; ST0 ST6 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=27 ; ST0 ST7 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=28 ; ST0 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=29 ; ST1 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=2A ; ST2 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=2B ; ST3 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=2C ; ST4 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=2D ; ST5 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=2E ; ST6 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=2F ; ST7 ST0 ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fsubp">
    <opcode> ; DE /mod=11 /x87=28 ; ST0 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=29 ; ST1 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=2A ; ST2 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=2B ; ST3 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=2C ; ST4 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=2D ; ST5 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=2E ; ST6 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=2F ; ST7 ST0 ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fsubr">
    <opcode cast="1"> aso rexr rexx rexb ; DC /mod=!11 /5 ; Mq ; ; u:st0 d:st0 </opcode>
    <opcode> ; D8 /mod=11 /x87=28 ; ST0 ST0 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=29 ; ST0 ST1 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=2A ; ST0 ST2 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=2B ; ST0 ST3 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=2C ; ST0 ST4 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=2D ; ST0 ST5 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=2E ; ST0 ST6 ; ; </opcode>
    <opcode> ; D8 /mod=11 /x87=2F ; ST0 ST7 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=20 ; ST0 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=21 ; ST1 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=22 ; ST2 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=23 ; ST3 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=24 ; ST4 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=25 ; ST5 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=26 ; ST6 ST0 ; ; </opcode>
    <opcode> ; DC /mod=11 /x87=27 ; ST7 ST0 ; ; </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; D8 /mod=!11 /5 ; Md ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fsubrp">
    <opcode> ; DE /mod=11 /x87=20 ; ST0 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=21 ; ST1 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=22 ; ST2 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=23 ; ST3 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=24 ; ST4 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=25 ; ST5 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=26 ; ST6 ST0 ; ; </opcode>
    <opcode> ; DE /mod=11 /x87=27 ; ST7 ST0 ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="ftst">
    <opcode> ; D9 /mod=11 /x87=24 ; ; ; u:st0 </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fucom">
    <opcode> ; DD /mod=11 /x87=20 ; ST0 ; ; </opcode>
    <opcode> ; DD /mod=11 /x87=21 ; ST1 ; ; </opcode>
    <opcode> ; DD /mod=11 /x87=22 ; ST2 ; ; </opcode>
    <opcode> ; DD /mod=11 /x87=23 ; ST3 ; ; </opcode>
    <opcode> ; DD /mod=11 /x87=24 ; ST4 ; ; </opcode>
    <opcode> ; DD /mod=11 /x87=25 ; ST5 ; ; </opcode>
    <opcode> ; DD /mod=11 /x87=26 ; ST6 ; ; </opcode>
    <opcode> ; DD /mod=11 /x87=27 ; ST7 ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fucomp">
    <opcode> ; DD /mod=11 /x87=28 ; ST0 ; ; </opcode>
    <opcode> ; DD /mod=11 /x87=29 ; ST1 ; ; </opcode>
    <opcode> ; DD /mod=11 /x87=2A ; ST2 ; ; </opcode>
    <opcode> ; DD /mod=11 /x87=2B ; ST3 ; ; </opcode>
    <opcode> ; DD /mod=11 /x87=2C ; ST4 ; ; </opcode>
    <opcode> ; DD /mod=11 /x87=2D ; ST5 ; ; </opcode>
    <opcode> ; DD /mod=11 /x87=2E ; ST6 ; ; </opcode>
    <opcode> ; DD /mod=11 /x87=2F ; ST7 ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fucompp">
    <opcode> ; DA /mod=11 /x87=29 ; ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fxam">
    <opcode> ; D9 /mod=11 /x87=25 ; ; ; u:st0 </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fxch">
    <opcode> ; D9 /mod=11 /x87=08 ; ST0 ST0 ; ; </opcode>
    <opcode> ; D9 /mod=11 /x87=09 ; ST0 ST1 ; ; </opcode>
    <opcode> ; D9 /mod=11 /x87=0A ; ST0 ST2 ; ; </opcode>
    <opcode> ; D9 /mod=11 /x87=0B ; ST0 ST3 ; ; </opcode>
    <opcode> ; D9 /mod=11 /x87=0C ; ST0 ST4 ; ; </opcode>
    <opcode> ; D9 /mod=11 /x87=0D ; ST0 ST5 ; ; </opcode>
    <opcode> ; D9 /mod=11 /x87=0E ; ST0 ST6 ; ; </opcode>
    <opcode> ; D9 /mod=11 /x87=0F ; ST0 ST7 ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fxch4">
    <opcode> ; DD /mod=11 /x87=08 ; ST0 ; ; u:st0 d:st0 </opcode>
    <opcode> ; DD /mod=11 /x87=09 ; ST1 ; ; u:st0 d:st0 </opcode>
    <opcode> ; DD /mod=11 /x87=0A ; ST2 ; ; u:st0 d:st0 </opcode>
    <opcode> ; DD /mod=11 /x87=0B ; ST3 ; ; u:st0 d:st0 </opcode>
    <opcode> ; DD /mod=11 /x87=0C ; ST4 ; ; u:st0 d:st0 </opcode>
    <opcode> ; DD /mod=11 /x87=0D ; ST5 ; ; u:st0 d:st0 </opcode>
    <opcode> ; DD /mod=11 /x87=0E ; ST6 ; ; u:st0 d:st0 </opcode>
    <opcode> ; DD /mod=11 /x87=0F ; ST7 ; ; u:st0 d:st0 </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fxch7">
    <opcode> ; DF /mod=11 /x87=08 ; ST0 ; ; u:st0 d:st0 </opcode>
    <opcode> ; DF /mod=11 /x87=09 ; ST1 ; ; u:st0 d:st0 </opcode>
    <opcode> ; DF /mod=11 /x87=0A ; ST2 ; ; u:st0 d:st0 </opcode>
    <opcode> ; DF /mod=11 /x87=0B ; ST3 ; ; u:st0 d:st0 </opcode>
    <opcode> ; DF /mod=11 /x87=0C ; ST4 ; ; u:st0 d:st0 </opcode>
    <opcode> ; DF /mod=11 /x87=0D ; ST5 ; ; u:st0 d:st0 </opcode>
    <opcode> ; DF /mod=11 /x87=0E ; ST6 ; ; u:st0 d:st0 </opcode>
    <opcode> ; DF /mod=11 /x87=0F ; ST7 ; ; u:st0 d:st0 </opcode>
    <class> X87 </class>
  </instruction>

  <!-- TODO f[n]save/frstor, xsave/xrstor? -->
  <instruction mnemonic="fxrstor">
    <opcode> aso rexw rexr rexx rexb ; AE /mod=!11 /1 ; M ; ; d:sta d:mma </opcode>
    <opcode> aso rexw rexr rexx rexb ; 0F AE /1 ; M ; ; d:sta d:mma </opcode>
  </instruction>

  <instruction mnemonic="fxsave">
    <opcode> aso rexw rexr rexx rexb ; AE /mod=!11 /0 ; M ; ; u:sta u:mma </opcode>
    <opcode> aso rexw rexr rexx rexb ; 0F AE /0 ; M ; ; u:sta u:mma </opcode>
  </instruction>

  <instruction mnemonic="fpxtract">
    <opcode> ; D9 /mod=11 /x87=34 ; ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fyl2x">
    <opcode> ; D9 /mod=11 /x87=31 ; ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="fyl2xp1">
    <opcode> ; D9 /mod=11 /x87=39 ; ; ; </opcode>
    <class> X87 </class>
  </instruction>

  <instruction mnemonic="haddpd">
    <opcode> aso rexr rexx rexb ; sse66 0f 7c ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f 7c ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="haddps">
    <opcode> aso rexr rexx rexb ; ssef2 0f 7c ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 ssef2 0f 7c ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="hlt">
    <opcode> ; f4 ; ; ; </opcode>
  </instruction>

  <instruction mnemonic="hsubpd">
    <opcode> aso rexr rexx rexb ; sse66 0f 7d ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f 7d ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="hsubps">
    <opcode> aso rexr rexx rexb ; ssef2 0f 7d ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 ssef2 0f 7d ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="idiv">
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; F7 /7 ; Ev ; d:alu ; u:ax u:dx d:ax d:dx </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb ; F6 /7 ; Eb ; d:alu ; u:ax d:ax </opcode>
  </instruction>

  <instruction mnemonic="in">
    <opcode> ; e4 ; AL Ib ; ; </opcode>
    <opcode> oso ; e5 ; eAX Ib ; ; </opcode>
    <opcode> ; ec ; AL DX ; ; </opcode>
    <opcode> oso ; ed ; eAX DX ; ; </opcode>
  </instruction>

  <instruction mnemonic="imul">
    <opcode> aso oso rexw rexr rexx rexb ; 0f af ; Gv Ev ; d:alu ; </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb ; F6 /5 ; Eb ; d:alu ; u:ax d:ax </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; F7 /5 ; Ev ; d:alu ; u:ax d:ax d:dx </opcode>
    <opcode> aso oso rexw rexr rexx rexb ; 69 ; Gv Ev Iz ; d:alu ; </opcode>
    <opcode> aso oso rexw rexr rexx rexb ; 6b ; Gv Ev Ib ; d:alu ; </opcode>
  </instruction>

  <instruction mnemonic="inc">
    <opcode> oso ; 40 ; eAX ; d:of d:sf d:zf d:af d:pf ; </opcode>
    <opcode> oso ; 41 ; eCX ; d:of d:sf d:zf d:af d:pf ; </opcode>
    <opcode> oso ; 42 ; eDX ; d:of d:sf d:zf d:af d:pf ; </opcode>
    <opcode> oso ; 43 ; eBX ; d:of d:sf d:zf d:af d:pf ; </opcode>
    <opcode> oso ; 44 ; eSP ; d:of d:sf d:zf d:af d:pf ; </opcode>
    <opcode> oso ; 45 ; eBP ; d:of d:sf d:zf d:af d:pf ; </opcode>
    <opcode> oso ; 46 ; eSI ; d:of d:sf d:zf d:af d:pf ; </opcode>
    <opcode> oso ; 47 ; eDI ; d:of d:sf d:zf d:af d:pf ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; FF /0 ; Ev ; d:of d:sf d:zf d:af d:pf ; </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb ; FE /0 ; Eb ; d:of d:sf d:zf d:af d:pf ; </opcode>
  </instruction>

  <instruction mnemonic="insb">
    <opcode> ; 6c ; ; u:df ; u:dx u:di d:di </opcode>
  </instruction>

  <instruction mnemonic="insw">
    <opcode> oso ; 6d /O16 ; ; u:df ; u:dx u:di d:di </opcode>
  </instruction>

  <instruction mnemonic="insd">
    <opcode> oso ; 6d /O32 ; ; u:df ; u:dx u:di d:di </opcode>
  </instruction>

  <instruction mnemonic="int1">
    <opcode> ; f1 ; ; d:tf d:nt ; </opcode>
  </instruction>

  <instruction mnemonic="int3">
    <opcode> ; cc ; ; d:tf d:nt ; </opcode>
  </instruction>

  <instruction mnemonic="int">
    <opcode> ; cd ; Ib ; d:tf d:nt ; </opcode>
  </instruction>

  <instruction mnemonic="into">
    <opcode mode="inv64"> ; ce ; ; u:of d:tf d:nt ; </opcode>
  </instruction>

  <instruction mnemonic="invd">
    <opcode> ; 0f 08 ; ; ; </opcode>
  </instruction>

  <instruction mnemonic="invlpg">
    <opcode> aso rexr rexx rexb ; 0F 01 /7 /mod=!11 ; M ; ; </opcode>
  </instruction>

  <instruction mnemonic="invlpga">
    <opcode> ; 0F 01 /3 /mod=11 /rm=7 ; ; ; </opcode>
    <vendor> AMD </vendor>
  </instruction>

  <instruction mnemonic="iretw">
    <opcode> oso rexw ; cf /O16 ; ; u:nt d:of d:sf d:zf d:af d:pf d:cf d:tf d:if d:df ; </opcode>
  </instruction>

  <instruction mnemonic="iretd">
    <opcode> oso rexw ; cf /O32 ; ; u:nt d:of d:sf d:zf d:af d:pf d:cf d:tf d:if d:df ; </opcode>
  </instruction>

  <instruction mnemonic="iretq">
    <opcode> oso rexw ; cf /O64 ; ; u:nt d:of d:sf d:zf d:af d:pf d:cf d:tf d:if d:df ; </opcode>
  </instruction>

  <instruction mnemonic="jo">
    <opcode> ; 70 ; Jb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
    <opcode mode="def64 depM" cast="1"> oso ; 0f 80 ; Jz ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="jno">
    <opcode> ; 71 ; Jb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
    <opcode mode="def64 depM" cast="1"> oso ; 0f 81 ; Jz ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="jb">
    <opcode> ; 72 ; Jb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
    <opcode mode="def64 depM" cast="1"> oso ; 0f 82 ; Jz ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="jae">
    <opcode> ; 73 ; Jb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
    <opcode mode="def64 depM" cast="1"> oso ; 0f 83 ; Jz ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="je">
    <opcode> ; 74 ; Jb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
    <opcode mode="def64 depM" cast="1"> oso ; 0f 84 ; Jz ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="jne">
    <opcode> ; 75 ; Jb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
    <opcode mode="def64 depM" cast="1"> oso ; 0f 85 ; Jz ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="jbe">
    <opcode> ; 76 ; Jb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
    <opcode mode="def64 depM" cast="1"> oso ; 0f 86 ; Jz ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="ja">
    <opcode> ; 77 ; Jb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
    <opcode mode="def64 depM" cast="1"> oso ; 0f 87 ; Jz ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="js">
    <opcode> ; 78 ; Jb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
    <opcode mode="def64 depM" cast="1"> oso ; 0f 88 ; Jz ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="jns">
    <opcode> ; 79 ; Jb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
    <opcode mode="def64 depM" cast="1"> oso ; 0f 89 ; Jz ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="jp">
    <opcode> ; 7a ; Jb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
    <opcode mode="def64 depM" cast="1"> oso ; 0f 8a ; Jz ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="jnp">
    <opcode> ; 7b ; Jb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
    <opcode mode="def64 depM" cast="1"> oso ; 0f 8b ; Jz ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="jl">
    <opcode> ; 7c ; Jb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
    <opcode mode="def64 depM" cast="1"> oso ; 0f 8c ; Jz ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="jge">
    <opcode> ; 7d ; Jb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
    <opcode mode="def64 depM" cast="1"> oso ; 0f 8d ; Jz ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="jle">
    <opcode> ; 7e ; Jb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
    <opcode mode="def64 depM" cast="1"> oso ; 0f 8e ; Jz ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="jg">
    <opcode> ; 7f ; Jb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
    <opcode mode="def64 depM" cast="1"> oso ; 0f 8f ; Jz ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="jcxz">
    <opcode> aso ; e3 /A16 ; Jb ; u:of u:sf u:zf u:pf u:cf ; u:cx </opcode>
  </instruction>

  <instruction mnemonic="jecxz">
    <opcode> aso ; e3 /A32 ; Jb ; u:of u:sf u:zf u:pf u:cf ; u:cx </opcode>
  </instruction>

  <instruction mnemonic="jrcxz">
    <opcode> aso ; e3 /A64 ; Jb ; u:of u:sf u:zf u:pf u:cf ; u:cx </opcode>
  </instruction>

  <instruction mnemonic="jmp">
    <opcode mode="def64 depM" cast="1"> aso oso rexw rexr rexx rexb ; FF /4 ; Ev ; ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; FF /5 ; Ep ; ; </opcode>
    <opcode mode="def64 depM"> oso ; e9 ; Jz ; ; </opcode>
    <opcode mode="inv64"> ; ea ; Ap ; ; </opcode>
    <opcode> ; eb ; Jb ; ; </opcode>
  </instruction>


  <instruction mnemonic="lahf">
    <opcode> ; 9f ; ; d:sf d:zf d:af d:pf d:cf ; d:ax </opcode>
  </instruction>

  <instruction mnemonic="lar">
    <opcode> aso oso rexw rexr rexx rexb ; 0f 02 ; Gv Ew ; d:zf ; </opcode>
  </instruction>

  <instruction mnemonic="lddqu">
    <opcode> aso rexr rexx rexb ; ssef2 0f f0 ; V M ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 ssef2 0f f0 ; V M ; ; </opcode>
  </instruction>

  <instruction mnemonic="ldmxcsr">
    <opcode> aso rexw rexr rexx rexb ; 0F AE /2 ; Md ; ; </opcode>
    <opcode> aso rexw rexr rexx rexb vexlz ; avxC4 0F AE /2 ; Md ; ; </opcode>
  </instruction>

  <instruction mnemonic="lds">
    <opcode mode="inv64"> aso oso ; c5 ; Gv M ; ; </opcode>
  </instruction>

  <instruction mnemonic="lea">
    <opcode> aso oso rexw rexr rexx rexb ; 8d ; Gv M ; ; </opcode>
  </instruction>

  <instruction mnemonic="les">
    <opcode mode="inv64"> aso oso ; c4 ; Gv M ; ; </opcode>
  </instruction>

  <instruction mnemonic="lfs">
    <opcode> aso oso rexw rexr rexx rexb ; 0f b4 ; Gz M ; ; </opcode>
  </instruction>

  <instruction mnemonic="lgs">
    <opcode> aso oso rexw rexr rexx rexb ; 0f b5 ; Gz M ; ; </opcode>
  </instruction>

  <instruction mnemonic="lidt">
    <opcode> aso rexr rexx rexb ; 0F 01 /3 /mod=!11 ; M ; ; </opcode>
  </instruction>

  <instruction mnemonic="lss">
    <opcode> aso oso rexw rexr rexx rexb ; 0f b2 ; Gz M ; ; </opcode>
  </instruction>

  <instruction mnemonic="leave">
    <opcode> ; c9 ; ; ; u:bp d:sp d:bp </opcode>
  </instruction>

  <instruction mnemonic="lfence">
    <opcode> ; 0F AE /5 /mod=11 /rm=0 ; ; ; </opcode>
    <opcode> ; 0F AE /5 /mod=11 /rm=1 ; ; ; </opcode>
    <opcode> ; 0F AE /5 /mod=11 /rm=2 ; ; ; </opcode>
    <opcode> ; 0F AE /5 /mod=11 /rm=3 ; ; ; </opcode>
    <opcode> ; 0F AE /5 /mod=11 /rm=4 ; ; ; </opcode>
    <opcode> ; 0F AE /5 /mod=11 /rm=5 ; ; ; </opcode>
    <opcode> ; 0F AE /5 /mod=11 /rm=6 ; ; ; </opcode>
    <opcode> ; 0F AE /5 /mod=11 /rm=7 ; ; ; </opcode>
  </instruction>

  <instruction mnemonic="lgdt">
    <opcode> aso rexr rexx rexb ; 0F 01 /2 /mod=!11 ; M ; ; </opcode>
  </instruction>

  <instruction mnemonic="lldt">
    <opcode> aso rexr rexx rexb ; 0F 00 /2 ; Ew ; ; </opcode>
  </instruction>

  <instruction mnemonic="lmsw">
    <opcode> aso rexr rexx rexb ; 0F 01 /6 /mod=!11 ; Ew ; ; </opcode>
  </instruction>

  <instruction mnemonic="lock">
    <opcode> ; f0 ; ; ; </opcode>
  </instruction>

  <instruction mnemonic="lodsb">
    <opcode imp_addr="1"> ; ac ; ; ; u:si d:ax d:si </opcode>
  </instruction>

  <instruction mnemonic="lodsw">
    <opcode imp_addr="1"> oso rexw ; ad /O16 ; ; ; u:si d:ax d:si </opcode>
  </instruction>

  <instruction mnemonic="lodsd">
    <opcode imp_addr="1"> oso rexw ; ad /O32 ; ; ; u:si d:ax d:si </opcode>
  </instruction>

  <instruction mnemonic="lodsq">
    <opcode imp_addr="1"> oso rexw ; ad /O64 ; ; ; u:si d:ax d:si </opcode>
  </instruction>

  <instruction mnemonic="loopnz">
    <opcode> ; e0 ; Jb ; u:zf ; u:cx d:cx </opcode>
  </instruction>

  <instruction mnemonic="loope">
    <opcode> ; e1 ; Jb ; u:zf ; u:cx d:cx </opcode>
  </instruction>

  <instruction mnemonic="loop">
    <opcode> ; e2 ; Jb ; u:df ; u:cx d:cx </opcode>
    <mode> def64 depM </mode>
  </instruction>

  <instruction mnemonic="lsl">
    <opcode> aso oso rexw rexr rexx rexb ; 0f 03 ; Gv Ew ; d:zf ; </opcode>
  </instruction>

  <instruction mnemonic="ltr">
    <opcode> aso rexr rexx rexb ; 0F 00 /3 ; Ew ; ; </opcode>
  </instruction>

  <instruction mnemonic="maskmovq">
    <opcode> aso rexr rexx rexb ; 0f f7 ; P Q ; ; </opcode>
  </instruction>

  <instruction mnemonic="maskmovdqu">
    <opcode> aso rexr rexx rexb ; sse66 0f f7 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f f7 ; V W ; ; </opcode>
  </instruction>

  <instruction mnemonic="maxpd">
    <opcode> aso rexr rexx rexb ; sse66 0f 5f ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f 5f ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="maxps">
    <opcode> aso rexr rexx rexb ; 0f 5f ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 0f 5f ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="maxsd">
    <opcode> aso rexr rexx rexb ; ssef2 0f 5f ; Vq Wq ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 ssef2 0f 5f ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="maxss">
    <opcode> aso rexr rexx rexb ; ssef3 0f 5f ; Vd Wd ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 ssef3 0f 5f ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="mfence">
    <opcode> ; 0F AE /6 /mod=11 /rm=0 ; ; ; </opcode>
    <opcode> ; 0F AE /6 /mod=11 /rm=1 ; ; ; </opcode>
    <opcode> ; 0F AE /6 /mod=11 /rm=2 ; ; ; </opcode>
    <opcode> ; 0F AE /6 /mod=11 /rm=3 ; ; ; </opcode>
    <opcode> ; 0F AE /6 /mod=11 /rm=4 ; ; ; </opcode>
    <opcode> ; 0F AE /6 /mod=11 /rm=5 ; ; ; </opcode>
    <opcode> ; 0F AE /6 /mod=11 /rm=6 ; ; ; </opcode>
    <opcode> ; 0F AE /6 /mod=11 /rm=7 ; ; ; </opcode>
  </instruction>

  <instruction mnemonic="minpd">
    <opcode> aso rexr rexx rexb ; sse66 0f 5d ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f 5d ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="minps">
    <opcode> aso rexr rexx rexb ; 0f 5d ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 0f 5d ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="minsd">
    <opcode> aso rexr rexx rexb ; ssef2 0f 5d ; Vq Wq ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 ssef2 0f 5d ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="minss">
    <opcode> aso rexr rexx rexb ; ssef3 0f 5d ; Vd Wd ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 ssef3 0f 5d ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="monitor">
    <opcode> ; 0F 01 /1 /mod=11 /rm=0 ; ; ; u:ax u:cx u:dx </opcode>
  </instruction>

  <instruction mnemonic="mov">
    <opcode cast="1"> aso rexw rexr rexx rexb ; C6 /0 ; Eb Ib ; ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; C7 /0 ; Ev Iz ; ; </opcode>
    <opcode> aso rexr rexx rexb ; 88 ; Eb Gb ; ; </opcode>
    <opcode> aso oso rexw rexr rexx rexb ; 89 ; Ev Gv ; ; </opcode>
    <opcode> aso rexr rexx rexb ; 8a ; Gb Eb ; ; </opcode>
    <opcode> aso oso rexw rexr rexx rexb ; 8b ; Gv Ev ; ; </opcode>
    <opcode> aso oso rexr rexx rexb ; 8c ; Ev S ; ; </opcode>
    <opcode> aso oso rexr rexx rexb ; 8e ; S Ev ; ; </opcode>
    <opcode> ; a0 ; AL Ob ; ; </opcode>
    <opcode> aso oso rexw ; a1 ; rAX Ov ; ; </opcode>
    <opcode> ; a2 ; Ob AL ; ; </opcode>
    <opcode> aso oso rexw ; a3 ; Ov rAX ; ; </opcode>
    <opcode> rexb ; b0 ; ALr8b Ib ; ; </opcode>
    <opcode> rexb ; b1 ; CLr9b Ib ; ; </opcode>
    <opcode> rexb ; b2 ; DLr10b Ib ; ; </opcode>
    <opcode> rexb ; b3 ; BLr11b Ib ; ; </opcode>
    <opcode> rexb ; b4 ; AHr12b Ib ; ; </opcode>
    <opcode> rexb ; b5 ; CHr13b Ib ; ; </opcode>
    <opcode> rexb ; b6 ; DHr14b Ib ; ; </opcode>
    <opcode> rexb ; b7 ; BHr15b Ib ; ; </opcode>
    <opcode> oso rexw rexb ; b8 ; rAXr8 Iv ; ; </opcode>
    <opcode> oso rexw rexb ; b9 ; rCXr9 Iv ; ; </opcode>
    <opcode> oso rexw rexb ; ba ; rDXr10 Iv ; ; </opcode>
    <opcode> oso rexw rexb ; bb ; rBXr11 Iv ; ; </opcode>
    <opcode> oso rexw rexb ; bc ; rSPr12 Iv ; ; </opcode>
    <opcode> oso rexw rexb ; bd ; rBPr13 Iv ; ; </opcode>
    <opcode> oso rexw rexb ; be ; rSIr14 Iv ; ; </opcode>
    <opcode> oso rexw rexb ; bf ; rDIr15 Iv ; ; </opcode>
    <opcode> rexr ; 0f 20 ; R C ; ; </opcode>
    <opcode> rexr ; 0f 21 ; R D ; ; </opcode>
    <opcode> rexr ; 0f 22 ; C R ; ; </opcode>
    <opcode> rexr ; 0f 23 ; D R ; ; </opcode>
  </instruction>

  <instruction mnemonic="movapd">
    <opcode> aso rexr rexx rexb ; sse66 0f 28 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f 28 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f 29 ; Wx Vx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f 29 ; W V ; ; </opcode>
  </instruction>

  <instruction mnemonic="movaps">
    <opcode> aso rexr rexx rexb ; 0f 28 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 0f 28 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; 0f 29 ; Wx Vx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 0f 29 ; W V ; ; </opcode>
  </instruction>

  <instruction mnemonic="movd">
    <opcode cast="2"> aso rexw rexr rexx rexb ; sse66 0f 6e ; V Ex ; ; </opcode>
    <opcode cast="2"> aso rexw rexr rexx rexb vexlig ; avxC4 sse66 0f 6e ; V Ex ; ; </opcode>
    <opcode cast="2"> aso rexr rexx rexb ; 0f 6e ; P Ex ; ; </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb ; sse66 0f 7e ; Ex V ; ; </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb vexlig ; avxC4 sse66 0f 7e ; Ex V ; ; </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; 0f 7e ; Ex P ; ; </opcode>
  </instruction>

  <instruction mnemonic="movddup">
    <opcode> aso rexr rexx rexb ; ssef2 0f 12 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 ssef2 0f 12 ; V W ; ; </opcode>
  </instruction>

  <instruction mnemonic="movdqa">
    <opcode> aso rexr rexx rexb ; sse66 0f 6f ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f 6f ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f 7f ; Wx Vx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f 7f ; W V ; ; </opcode>
  </instruction>

  <instruction mnemonic="movdqu">
    <opcode> aso rexr rexx rexb ; ssef3 0f 6f ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 ssef3 0f 6f ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; ssef3 0f 7f ; Wx Vx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 ssef3 0f 7f ; W V ; ; </opcode>
  </instruction>

  <instruction mnemonic="movdq2q">
    <opcode> aso rexb ; ssef2 0f d6 ; P VR ; ; </opcode>
  </instruction>

  <instruction mnemonic="movhpd">
    <opcode> aso rexr rexx rexb ; sse66 0f 16 ; Vq Mq ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f 16 ; V X M ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f 17 ; Mq Vq ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f 17 ; M V ; ; </opcode>
  </instruction>

  <instruction mnemonic="movhps">
    <opcode> aso rexr rexx rexb ; 0f 16 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 0f 16 ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; 0f 17 ; M V ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 0f 17 ; M V ; ; </opcode>
  </instruction>

  <!-- TODO: in the intel docs, this is indistinguishable from movhps -->
  <instruction mnemonic="movlhps"></instruction>

  <instruction mnemonic="movlpd">
    <opcode> aso rexr rexx rexb ; sse66 0f 12 ; V M ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f 12 ; V X M ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f 13 ; M V ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f 13 ; M V ; ; </opcode>
  </instruction>

  <instruction mnemonic="movlps">
    <opcode> aso rexr rexx rexb ; 0f 12 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 0f 12 ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; 0f 13 ; M V ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 0f 13 ; M V ; ; </opcode>
  </instruction>

  <!-- TODO: in the intel docs, this is indistinguishable from movlps -->
  <instruction mnemonic="movhlps"></instruction>

  <instruction mnemonic="movmskpd">
    <opcode> oso rexr rexb ; sse66 0f 50 ; Gd VR ; ; </opcode>
    <opcode> oso rexr rexb ; avxC4 sse66 0f 50 ; Gd VR ; ; </opcode>
  </instruction>

  <instruction mnemonic="movmskps">
    <opcode> oso rexr rexb ; 0f 50 ; Gd VR ; ; </opcode>
    <opcode> oso rexr rexb ; avxC4 0f 50 ; Gd VR ; ; </opcode>
  </instruction>

  <instruction mnemonic="movntdq">
    <opcode> aso rexr rexx rexb ; sse66 0f e7 ; M V ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f e7 ; M V ; ; </opcode>
  </instruction>

  <instruction mnemonic="movnti">
    <opcode> aso rexw rexr rexx rexb ; 0f c3 ; M Gvw ; ; </opcode>
  </instruction>

  <instruction mnemonic="movntpd">
    <opcode> aso rexr rexx rexb ; sse66 0f 2b ; M V ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f 2b ; M V ; ; </opcode>
  </instruction>

  <instruction mnemonic="movntps">
    <opcode> aso rexr rexx rexb ; 0f 2b ; M V ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 0f 2b ; M V ; ; </opcode>
  </instruction>

  <instruction mnemonic="movntq">
    <opcode> ; 0f e7 ; M P ; ; </opcode>
  </instruction>

    <!-- TODO: intel docs don't have these avx instructions, but they appear to exist -->
  <instruction mnemonic="movq">
    <opcode> aso rexr rexx rexb ; 0f 6f ; P Q ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f d6 ; W V ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f d6 ; W V ; ; </opcode>
    <opcode> aso rexr rexx rexb ; ssef3 0f 7e ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 ssef3 0f 7e ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; 0f 7f ; Q P ; ; </opcode>
  </instruction>

  <instruction mnemonic="movq2dq">
    <opcode> aso ; ssef3 0f d6 ; V PR ; ; </opcode>
  </instruction>

  <instruction mnemonic="movsb">
    <opcode imp_addr="1"> ; a4 ; ; u:df ; u:si u:di d:si d:di </opcode>
  </instruction>

  <instruction mnemonic="movsw">
    <opcode imp_addr="1"> oso rexw ; a5 /O16 ; ; u:df ; u:si u:di d:si d:di </opcode>
  </instruction>

  <instruction mnemonic="movsd">
    <opcode imp_addr="1"> oso rexw ; a5 /O32 ; ; u:df ; u:si u:di d:si d:di </opcode>
    <opcode> aso rexr rexx rexb       ;       ssef2 0f 10 ; Vq Wq ; ; </opcode>

    <!-- TODO: the AVX instructions introduce another form that is seemingly 
         indistinguishable from this one in the opcode (same with ss) -->
    <opcode> aso rexr rexx rexb vexlig ; avxC4 ssef2 0f 10 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb       ;       ssef2 0f 11 ; Wq Vq ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 ssef2 0f 11 ; W V ; ; </opcode>
  </instruction>

  <instruction mnemonic="movsq">
    <opcode imp_addr="1"> oso rexw ; a5 /O64 ; ; u:df ; u:si u:di d:si d:di </opcode>
  </instruction>

  <instruction mnemonic="movsldup">
    <opcode> aso rexr rexx rexb ; ssef3 0f 12 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 ssef3 0f 12 ; V W ; ; </opcode>
  </instruction>

  <instruction mnemonic="movshdup">
    <opcode> aso rexr rexx rexb ; ssef3 0f 16 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 ssef3 0f 16 ; V W ; ; </opcode>
  </instruction>

  <instruction mnemonic="movss">
    <opcode> aso rexr rexx rexb ; ssef3 0f 10 ; Vd Wd ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 ssef3 0f 10 /mod=!11 ; Vd Wd ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 ssef3 0f 10 /mod=11 ; Vd X Wd ; ; </opcode>

    <opcode> aso rexr rexx rexb ; ssef3 0f 11 ; Wd Vd ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 ssef3 0f 11 /mod=!11 ; Wd Vd ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 ssef3 0f 11 /mod=11 ; Wd X Vd ; ; </opcode>
  </instruction>

  <instruction mnemonic="movsx">
    <opcode cast="2"> aso oso rexw rexr rexx rexb ; 0f be ; Gv Eb ; ; </opcode>
    <opcode cast="2"> aso oso rexw rexr rexx rexb ; 0f bf ; Gv Ew ; ; </opcode>
  </instruction>

  <instruction mnemonic="movupd">
    <opcode> aso rexr rexx rexb ; sse66 0f 10 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f 10 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f 11 ; Wx Vx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f 11 ; W V ; ; </opcode>
  </instruction>

  <instruction mnemonic="movups">
    <opcode> aso rexr rexx rexb ; 0f 10 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 0f 10 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; 0f 11 ; Wx Vx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 0f 11 ; Wx Vx ; ; </opcode>
  </instruction>

  <instruction mnemonic="movzx">
    <opcode cast="2"> aso oso rexw rexr rexx rexb ; 0f b6 ; Gv Eb ; ; </opcode>
    <opcode cast="2"> aso oso rexw rexr rexx rexb ; 0f b7 ; Gv Ew ; ; </opcode>
  </instruction>

  <instruction mnemonic="mul">
    <opcode cast="1"> aso rexw rexr rexx rexb ; F6 /4 ; Eb ; d:alu ; u:ax d:ax d:dx </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; F7 /4 ; Ev ; d:alu ; u:ax d:ax d:dx </opcode>
  </instruction>

  <instruction mnemonic="mulpd">
    <opcode> aso rexr rexx rexb ; sse66 0f 59 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f 59 ; Vx X Wx ; ; </opcode>
  </instruction>

  <instruction mnemonic="mulps">
    <opcode> aso rexr rexx rexb ; 0f 59 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 0f 59 ; Vx X Wx ; ; </opcode>
  </instruction>

  <instruction mnemonic="mulsd">
    <opcode> aso rexr rexx rexb ; ssef2 0f 59 ; Vq Wq ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 ssef2 0f 59 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="mulss">
    <opcode> aso rexr rexx rexb ; ssef3 0f 59 ; Vd Wd ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 ssef3 0f 59 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="mwait">
    <opcode> ; 0F 01 /1 /mod=11 /rm=1 ; ; ; u:ax u:cx </opcode>
  </instruction>

  <instruction mnemonic="neg">
    <opcode cast="1"> aso rexw rexr rexx rexb ; F6 /3 ; Eb ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; F7 /3 ; Ev ; d:alu ; </opcode>
  </instruction>

  <instruction mnemonic="nop">
    <opcode> ; 90 ; ; ; </opcode>
    <opcode> aso rexr rexx rexb ; 0f 19 ; M ; ; </opcode>
    <opcode> aso rexr rexx rexb ; 0f 1a ; M ; ; </opcode>
    <opcode> aso rexr rexx rexb ; 0f 1b ; M ; ; </opcode>
    <opcode> aso rexr rexx rexb ; 0f 1c ; M ; ; </opcode>
    <opcode> aso rexr rexx rexb ; 0f 1d ; M ; ; </opcode>
    <opcode> aso rexr rexx rexb ; 0f 1e ; M ; ; </opcode>
    <opcode> aso rexr rexx rexb ; 0f 1f ; M ; ; </opcode>
  </instruction>

  <instruction mnemonic="not">
    <opcode cast="1"> aso rexw rexr rexx rexb ; F6 /2 ; Eb ; ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; F7 /2 ; Ev ; ; </opcode>
  </instruction>

  <instruction mnemonic="or">
    <opcode> aso rexr rexx rexb ; 08 ; Eb Gb ; d:alu ; </opcode>
    <opcode> aso oso rexw rexr rexx rexb ; 09 ; Ev Gv ; d:alu ; </opcode>
    <opcode> aso rexr rexx rexb ; 0a ; Gb Eb ; d:alu ; </opcode>
    <opcode> aso oso rexw rexr rexx rexb ; 0b ; Gv Ev ; d:alu ; </opcode>
    <opcode> ; 0c ; AL Ib ; d:alu ; </opcode>
    <opcode> oso rexw ; 0d ; rAX Iz ; d:alu ; </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; 80 /1 ; Eb Ib ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; 81 /1 ; Ev Iz ; d:alu ; </opcode>
    <opcode mode="inv64" cast="1"> aso rexr rexx rexb ; 82 /1 ; Eb Ib ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; 83 /1 ; Ev Ib ; d:alu ; </opcode>
  </instruction>

  <instruction mnemonic="orpd">
    <opcode> aso rexr rexx rexb ; sse66 0f 56 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f 56 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="orps">
    <opcode> aso rexr rexx rexb ; 0f 56 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 0f 56 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="out">
    <opcode> ; e6 ; Ib AL ; ; </opcode>
    <opcode> oso ; e7 ; Ib eAX ; ; </opcode>
    <opcode> ; ee ; DX AL ; ; </opcode>
    <opcode> oso ; ef ; DX eAX ; ; </opcode>
  </instruction>

  <instruction mnemonic="outsb">
    <opcode> ; 6e ; ; u:df ; u:dx u:si d:si </opcode>
  </instruction>

  <instruction mnemonic="outsw">
    <opcode> oso ; 6f /o16 ; ; u:df ; u:dx u:si d:si </opcode>
  </instruction>

  <instruction mnemonic="outsd">
    <opcode> oso ; 6f /o32 ; ; u:df ; u:dx u:si d:si </opcode>
  </instruction>

  <!-- TODO does this use df? -->
  <instruction mnemonic="outsq">
    <opcode> oso ; 6f /o64; ; u:df ; u:dx u:si d:si </opcode>
  </instruction>

  <instruction mnemonic="packsswb">
    <opcode> aso rexr rexx rexb ; 0f 63 ; P Q ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f 63 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f 63 ; Vx X Wx ; ; </opcode>
  </instruction>

  <instruction mnemonic="packssdw">
    <opcode> aso rexr rexx rexb ; 0f 6b ; P Q ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f 6b ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f 6b ; Vx X Wx ; ; </opcode>
  </instruction>

  <instruction mnemonic="packuswb">
    <opcode> aso rexr rexx rexb ; 0f 67 ; P Q ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f 67 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f 67 ; Vx X Wx ; ; </opcode>
  </instruction>

  <instruction mnemonic="paddb">
    <opcode> aso rexr rexx rexb ; 0f fc ; Pq Qq ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f fc ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f fc ; Vx X Wx ; ; </opcode>
  </instruction>

  <instruction mnemonic="paddd">
    <opcode> aso rexr rexx rexb ; 0f fe ; Pq Qq ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f fe ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f fe ; Vx X Wx ; ; </opcode>
  </instruction>

  <instruction mnemonic="paddw">
    <opcode> aso rexr rexx rexb ; 0f fd ; Pq Qq ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f fd ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f fd ; Vx X Wx ; ; </opcode>
  </instruction>

  <instruction mnemonic="paddq">
    <opcode> aso rexr rexx rexb ; 0f d4 ; Pq Qq ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f d4 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f d4 ; Vx X Wx ; ; </opcode>
  </instruction>

  <instruction mnemonic="paddsb">
    <opcode> aso rexr rexx rexb ; 0f ec ; Pq Qq ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f ec ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f ec ; Vx X Wx ; ; </opcode>
  </instruction>

  <instruction mnemonic="paddsw">
    <opcode> aso rexr rexx rexb ; 0f ed ; Pq Qq ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f ed ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f ed ; Vx X Wx ; ; </opcode>
  </instruction>

  <instruction mnemonic="paddusb">
    <opcode> aso rexr rexx rexb ; 0f dc ; P Q ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f dc ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f dc ; Vx X Wx ; ; </opcode>
  </instruction>

  <instruction mnemonic="paddusw">
    <opcode> aso rexr rexx rexb ; 0f dd ; P Q ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f dd ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f dd ; Vx X Wx ; ; </opcode>
  </instruction>

  <instruction mnemonic="pand">
    <opcode> aso rexr rexx rexb ; 0f db ; P Q ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f db ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f db ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="pandn">
    <opcode> aso rexr rexx rexb ; 0f df ; P Q ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f df ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f df ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="pause">
    <opcode> ; f3 90 ; ; ; </opcode> 
  </instruction>

  <instruction mnemonic="pavgb">
    <opcode> aso rexr rexx rexb ; 0f e0 ; P Q ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f e0 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f e0 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="pavgw">
    <opcode> aso rexr rexx rexb ; 0f e3 ; P Q ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f e3 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f e3 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="pcmpeqb">
    <opcode> aso rexr rexx rexb ; 0f 74 ; P Q ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f 74 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f 74 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="pcmpeqw">
    <opcode> aso rexr rexx rexb ; 0f 75 ; P Q ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f 75 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f 75 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="pcmpeqd">
    <opcode> aso rexr rexx rexb ; 0f 76 ; P Q ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f 76 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f 76 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="pcmpgtb">
    <opcode> aso rexr rexx rexb ; 0f 64 ; P Q ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f 64 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f 64 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="pcmpgtw">
    <opcode> aso rexr rexx rexb ; 0f 65 ; P Q ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f 65 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f 65 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="pcmpgtd">
    <opcode> aso rexr rexx rexb ; 0f 66 ; P Q ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f 66 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f 66 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="pextrw">
    <opcode> aso oso rexw rexr rexx rexb ; 0f c5 ; Gd PR Ib ; ; </opcode>
    <opcode> aso rexr rexb ; sse66 0f c5 ; Gd PR Ib ; ; </opcode>
    <opcode> aso rexr rexb vexlig ; avxC4 sse66 0f c5 ; Gd PR Ib ; ; </opcode>
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=3a 15; Ew W Ib ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=3a 15; Ew W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="pinsrw">
    <opcode> aso oso rexw rexr rexx rexb ; 0f c4 ; P Ew Ib ; ; </opcode>
    <opcode> aso rexw rexr rexx rexb ; sse66 0f c4 ; P Ew Ib ; ; </opcode>
    <opcode> aso rexw rexr rexx rexb vexlig; avxC4 sse66 0f c4 ; P X Ew Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="pmaddwd">
    <opcode> aso rexr rexx rexb ; 0f f5 ; P Q ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f f5 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig; avxC4 sse66 0f f5 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="pmaxsw">
    <opcode> aso rexr rexx rexb ; 0f ee ; Pq Qq ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f ee ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f ee ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="pmaxub">
    <opcode> aso rexr rexx rexb ; 0f de ; Pq Qq ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f de ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f de ; V W ; ; </opcode>
  </instruction>

  <instruction mnemonic="pminsw">
    <opcode> aso rexr rexx rexb ; 0f ea ; Pq Qq ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f ea ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f ea ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="pminub">
    <opcode> aso rexr rexx rexb ; 0f da ; Pq Qq ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f da ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f da ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="pmovmskb">
    <opcode> oso rexr rexb ; 0f d7 ; Gd PR ; ; </opcode>
    <opcode> rexr rexb ; sse66 0f d7 ; Gd VR ; ; </opcode>
    <opcode> rexr rexb vexlig ; avxC4 sse66 0f d7 ; Gd VR ; ; </opcode>
  </instruction>

  <instruction mnemonic="pmulhuw">
    <opcode> aso rexr rexx rexb ; 0f e4 ; Pq Qq ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f e4 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f e4 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="pmulhw">
    <opcode> aso rexr rexx rexb ; 0f e5 ; P Q ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f e5 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f e5 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="pmulld">
    <opcode> aso rexr rexx rexb ; sse66 0f /3byte=38 40 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 40 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="pmullw">
    <opcode> aso rexr rexx rexb ; 0f d5 ; Pq Qq ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f d5 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f d5 ; V X W ; ; </opcode>
  </instruction>
 
  <!-- not accurate - reads from lower registers. writes to whole registers FIXME-->
  <instruction mnemonic="pmuludq">
    <opcode> aso rexr rexx rexb ; 0f f4 ; Pq Qq ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f f4 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f f4 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="pop">
    <opcode mode="inv64"> ; 07 ; ES ; ; u:sp d:sp </opcode>
    <opcode mode="inv64"> ; 17 ; SS ; ; u:sp d:sp </opcode>
    <opcode mode="inv64"> ; 1f ; DS ; ; u:sp d:sp </opcode>
    <opcode> ; 0f a9 ; GS ; ; u:sp d:sp </opcode>
    <opcode> ; 0f a1 ; FS ; ; u:sp d:sp </opcode>
    <opcode mode="def64 depM"> oso rexb ; 58 ; rAXr8 ; ; u:sp d:sp </opcode>
    <opcode mode="def64 depM"> oso rexb ; 59 ; rCXr9 ; ; u:sp d:sp </opcode>
    <opcode mode="def64 depM"> oso rexb ; 5A ; rDXr10 ; ; u:sp d:sp </opcode>
    <opcode mode="def64 depM"> oso rexb ; 5B ; rBXr11 ; ; u:sp d:sp </opcode>
    <opcode mode="def64 depM"> oso rexb ; 5C ; rSPr12 ; ; u:sp d:sp </opcode>
    <opcode mode="def64 depM"> oso rexb ; 5D ; rBPr13 ; ; u:sp d:sp </opcode>
    <opcode mode="def64 depM"> oso rexb ; 5E ; rSIr14 ; ; u:sp d:sp </opcode>
    <opcode mode="def64 depM"> oso rexb ; 5F ; rDIr15 ; ; u:sp d:sp </opcode>
    <opcode mode="def64 depM" cast="1"> aso oso rexw rexr rexx rexb ; 8F /0 ; Ev ; ; u:sp d:sp </opcode>
  </instruction>

  <instruction mnemonic="popa">
    <opcode mode="inv64"> oso ; 61 /O16 ; ; ; u:sp d:ax d:bx d:cx d:dx d:sp d:bp d:si d:di </opcode>
  </instruction>

  <instruction mnemonic="popad">
    <opcode mode="inv64"> oso ; 61 /O32 ; ; ; u:sp d:ax d:bx d:cx d:dx d:sp d:bp d:si d:di </opcode>
  </instruction>

  <instruction mnemonic="popfw">
    <opcode mode="def64 depM"> oso ; 9d /M32 /O16 ; ; d:of d:sf d:zf d:af d:pf d:cf d:tf d:if d:df d:nt ; u:sp d:sp </opcode>
    <opcode mode="def64 depM"> oso ; 9d /M16 /O16 ; ; d:of d:sf d:zf d:af d:pf d:cf d:tf d:if d:df d:nt ; u:sp d:sp </opcode>
  </instruction>

  <instruction mnemonic="popfd">
    <opcode mode="def64 depM"> oso ; 9d /M16 /O32 ; ; d:of d:sf d:zf d:af d:pf d:cf d:tf d:if d:df d:nt ; u:sp d:sp </opcode>
    <opcode mode="def64 depM"> oso ; 9d /M32 /O32 ; ; d:of d:sf d:zf d:af d:pf d:cf d:tf d:if d:df d:nt ; u:sp d:sp </opcode>
  </instruction>

  <instruction mnemonic="popfq">
    <opcode mode="def64 depM"> oso ; 9d /M64 ; ; d:of d:sf d:zf d:af d:pf d:cf d:tf d:if d:df d:nt ; u:sp d:sp </opcode>
  </instruction>

  <instruction mnemonic="por">
    <opcode> aso rexr rexx rexb ; 0f eb ; P Q ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f eb ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f eb ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="prefetch">
    <opcode> aso rexw rexr rexx rexb ; 0F 0D /0 ; M ; ; </opcode>
    <opcode> aso rexw rexr rexx rexb ; 0F 0D /1 ; M ; ; </opcode>
    <opcode> aso rexw rexr rexx rexb ; 0F 0D /2 ; M ; ; </opcode>
    <opcode> aso rexw rexr rexx rexb ; 0F 0D /3 ; M ; ; </opcode>
    <opcode> aso rexw rexr rexx rexb ; 0F 0D /4 ; M ; ; </opcode>
    <opcode> aso rexw rexr rexx rexb ; 0F 0D /5 ; M ; ; </opcode>
    <opcode> aso rexw rexr rexx rexb ; 0F 0D /6 ; M ; ; </opcode>
    <opcode> aso rexw rexr rexx rexb ; 0F 0D /7 ; M ; ; </opcode>
  </instruction>

  <instruction mnemonic="prefetchnta">
    <opcode> aso rexw rexr rexx rexb ; 0F 18 /0 ; M ; ; </opcode>
  </instruction>

  <instruction mnemonic="prefetcht0">
    <opcode> aso rexw rexr rexx rexb ; 0F 18 /1 ; M ; ; </opcode>
  </instruction>

  <instruction mnemonic="prefetcht1">
    <opcode> aso rexw rexr rexx rexb ; 0F 18 /2 ; M ; ; </opcode>
  </instruction>

  <instruction mnemonic="prefetcht2">
    <opcode> aso rexw rexr rexx rexb ; 0F 18 /3 ; M ; ; </opcode>
  </instruction>

  <instruction mnemonic="psadbw">
    <opcode> aso rexr rexx rexb ; 0f f6 ; P Q ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f f6 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f f6 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="pshufb">
    <opcode> aso oso rexr rexx rexb ; 0f /3byte=38 00 ; P Q ; ; </opcode>
    <opcode> aso oso rexr rexx rexb ; sse66 0f /3byte=38 00 ; V W ; ; </opcode>
    <opcode> aso oso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 00 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="pshufd">
    <opcode> aso rexr rexx rexb ; sse66 0f 70 ; Vx Wx Ib ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f 70 ; V W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="pshufhw">
    <opcode> aso rexr rexx rexb ; ssef3 0f 70 ; V W Ib ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 ssef3 0f 70 ; V W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="pshuflw">
    <opcode> aso rexr rexx rexb ; ssef2 0f 70 ; V W Ib ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 ssef2 0f 70 ; V W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="pshufw">
    <opcode> aso rexr rexx rexb ; 0f 70 ; P Q Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="pslldq">
    <opcode> rexb ; sse66 0F 73 /7 ; VR Ib ; ; </opcode>
    <opcode> rexb vexlig ; avxC4 sse66 0F 73 /7 ; X VR Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="psllw">
    <opcode> aso rexr rexx rexb ; 0f f1 ; Pq Qq ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f f1 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f f1 ; V X W ; ; </opcode>
    <opcode> ; 0F 71 /6 ; PR Ib ; ; </opcode>
    <opcode> rexb ; sse66 0F 71 /6 ; VR Ib ; ; </opcode>
    <opcode> rexb vexlig ; avxC4 sse66 0F 71 /6 ; X VR Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="pslld">
    <opcode> aso rexr rexx rexb ; 0f f2 ; Pq Qq ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f f2 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f f2 ; V X W ; ; </opcode>
    <opcode> ; 0F 72 /6 ; PRq Ib ; ; </opcode>
    <opcode> rexb ; sse66 0F 72 /6 ; VRx Ib ; ; </opcode>
    <opcode> rexb vexlig ; avxC4 sse66 0F 72 /6 ; X VR Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="psllq">
    <opcode> aso rexr rexx rexb ; 0f f3 ; Pq Qq ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f f3 ; Vx Wx ; ; </opcode>    
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f f3 ; V X W ; ; </opcode>    
    <opcode> ; 0F 73 /6 ; PRq Ib ; ; </opcode>
    <opcode> rexb ; sse66 0F 73 /6 ; VRx Ib ; ; </opcode>
    <opcode> rexb vexlig ; avxC4 sse66 0F 73 /6 ; X VR Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="psraw">
    <opcode> aso rexr rexx rexb ; 0f e1 ; Pq Qq ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f e1 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f e1 ; V X W ; ; </opcode>
    <opcode> ; 0F 71 /4 ; PRq Ib ; ; </opcode>
    <opcode> rexb ; sse66 0F 71 /4 ; VRx Ib ; ; </opcode>
    <opcode> rexb vexlig ; avxC4 sse66 0F 71 /4 ; X VR Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="psrad">
    <opcode> ; 0F 72 /4 ; PRq Ib ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f e2 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; 0f e2 ; Pq Qq ; ; </opcode>
    <opcode> rexb ; sse66 0F 72 /4 ; VRx Ib ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f e2 ; Vx X Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0F 72 /4 ; X VR Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="psrlw">
    <opcode> ; 0F 71 /2 ; PR Ib ; ; </opcode>
    <opcode> rexb ; sse66 0F 71 /2 ; VR Ib ; ; </opcode>
    <opcode> aso rexr rexx rexb ; 0f d1 ; P Q ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f d1 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb  ; avxC4 sse66 0F 71 /2 ; X VR Ib ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f d1 ; Vx X Wx ; ; </opcode>
  </instruction>

  <instruction mnemonic="psrld">
    <opcode> ; 0F 72 /2 ; PRq Ib ; ; </opcode>
    <opcode> rexb ; sse66 0F 72 /2 ; VRx Ib ; ; </opcode>
    <opcode> aso rexr rexx rexb ; 0f d2 ; Pq Qq ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f d2 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0F 72 /2 ; X VR Ib ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f d2 ; Vx X Wx ; ; </opcode>
  </instruction>

  <instruction mnemonic="psrlq">
    <opcode> ; 0F 73 /2 ; PRq Ib ; ; </opcode>
    <opcode> rexb ; sse66 0F 73 /2 ; VRx Ib ; ; </opcode>
    <opcode> rexb vexlig ; avxC4 sse66 0F 73 /2 ; X VR Ib ; ; </opcode>
    <opcode> aso rexr rexx rexb ; 0f d3 ; Pq Qq ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f d3 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f d3 ; Vx X Wx ; ; </opcode>
  </instruction>

  <instruction mnemonic="psrldq">
    <opcode> rexb ; sse66 0F 73 /3 ; VRx Ib ; ; </opcode>
    <opcode> rexr rexx rexb ; avxC4 sse66 0F 73 /3 ; X VRx Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="psubb">
    <opcode> aso rexr rexx rexb ; 0f f8 ; Pq Qq ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f f8 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f f8 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="psubw">
    <opcode> aso rexr rexx rexb ; 0f f9 ; Pq Qq ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f f9 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f f9 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="psubd">
    <opcode> aso rexr rexx rexb ; 0f fa ; Pq Qq ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f fa ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f fa ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="psubq">
    <opcode> aso rexr rexx rexb ; 0f fb ; Pq Qq ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f fb ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f fb ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="psubsb">
    <opcode> aso rexr rexx rexb ; 0f e8 ; Pq Qq ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f e8 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f e8 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="psubsw">
    <opcode> aso rexr rexx rexb ; 0f e9 ; Pq Qq ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f e9 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f e9 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="psubusb">
    <opcode> aso rexr rexx rexb ; 0f d8 ; Pq Qq ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f d8 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f d8 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="psubusw">
    <opcode> aso rexr rexx rexb ; 0f d9 ; Pq Qq ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f d9 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f d9 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="punpckhbw">
    <opcode> aso rexr rexx rexb ; 0f 68 ; P Q ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f 68 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f 68 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="punpckhwd">
    <opcode> aso rexr rexx rexb ; 0f 69 ; P Q ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f 69 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="punpckhdq">
    <opcode> aso rexr rexx rexb ; 0f 6a ; P Q ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f 6a ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f 6a ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="punpckhqdq">
    <opcode> aso rexr rexx rexb ; sse66 0f 6d ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f 6d ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="punpcklbw">
    <opcode> aso rexr rexx rexb ; 0f 60 ; P Q ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f 60 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f 60 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="punpcklwd">
    <opcode> aso rexr rexx rexb ; 0f 61 ; P Q ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f 61 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f 61 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="punpckldq">
    <opcode> aso rexr rexx rexb ; 0f 62 ; P Q ; ; </opcode>
    <opcode> aso rexr rexx rexb ; sse66 0f 62 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f 62 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="punpcklqdq">
    <opcode> aso rexr rexx rexb ; sse66 0f 6c ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f 6c ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="pi2fw">
    <opcode> ; 0f 0f /3dnow=0C ; P Q ; ; </opcode>
  </instruction> 

  <instruction mnemonic="pi2fd">
    <opcode> ; 0f 0f /3dnow=0D ; P Q ; ; </opcode>
  </instruction> 

  <instruction mnemonic="pf2iw">
    <opcode> ; 0f 0f /3dnow=1C ; P Q ; ; </opcode>
  </instruction> 

  <instruction mnemonic="pf2id">
    <opcode> ; 0f 0f /3dnow=1D ; P Q ; ; </opcode>
  </instruction> 

  <instruction mnemonic="pfnacc">
    <opcode> ; 0f 0f /3dnow=8A ; P Q ; ; </opcode>
  </instruction> 

  <instruction mnemonic="pfpnacc">
    <opcode> ; 0f 0f /3dnow=8E ; P Q ; ; </opcode>
  </instruction> 

  <instruction mnemonic="pfcmpge">
    <opcode> ; 0f 0f /3dnow=90 ; P Q ; ; </opcode>
  </instruction> 

  <instruction mnemonic="pfmin">
    <opcode> ; 0f 0f /3dnow=94 ; P Q ; ; </opcode>
  </instruction> 

  <instruction mnemonic="pfrcp">
    <opcode> ; 0f 0f /3dnow=96 ; P Q ; ; </opcode>
  </instruction> 

  <instruction mnemonic="pfrsqrt">
    <opcode> ; 0f 0f /3dnow=97 ; P Q ; ; </opcode>
  </instruction> 

  <instruction mnemonic="pfsub">
    <opcode> ; 0f 0f /3dnow=9A ; P Q ; ; </opcode>
  </instruction> 

  <instruction mnemonic="pfadd">
    <opcode> ; 0f 0f /3dnow=9E ; P Q ; ; </opcode>
  </instruction> 

  <instruction mnemonic="pfcmpgt">
    <opcode> ; 0f 0f /3dnow=A0 ; P Q ; ; </opcode>
  </instruction> 

  <instruction mnemonic="pfmax">
    <opcode> ; 0f 0f /3dnow=A4 ; P Q ; ; </opcode>
  </instruction> 

  <instruction mnemonic="pfrcpit1">
    <opcode> ; 0f 0f /3dnow=A6 ; P Q ; ; </opcode>
  </instruction> 

  <instruction mnemonic="pfrspit1">
    <opcode> ; 0f 0f /3dnow=A7 ; P Q ; ; </opcode>
  </instruction> 

  <instruction mnemonic="pfsubr">
    <opcode> ; 0f 0f /3dnow=AA ; P Q ; ; </opcode>
  </instruction> 

  <instruction mnemonic="pfacc">
    <opcode> ; 0f 0f /3dnow=AE ; P Q ; ; </opcode>
  </instruction> 

  <instruction mnemonic="pfcmpeq">
    <opcode> ; 0f 0f /3dnow=B0 ; P Q ; ; </opcode>
  </instruction> 

  <instruction mnemonic="pfmul">
    <opcode> ; 0f 0f /3dnow=B4 ; P Q ; ; </opcode>
  </instruction> 

  <instruction mnemonic="pfrcpit2">
    <opcode> ; 0f 0f /3dnow=B6 ; P Q ; ; </opcode>
  </instruction> 

  <instruction mnemonic="pmulhrw">
    <opcode> ; 0f 0f /3dnow=B7 ; P Q ; ; </opcode>
  </instruction> 

  <instruction mnemonic="pswapd">
    <opcode> ; 0f 0f /3dnow=BB ; P Q ; ; </opcode>
  </instruction> 

  <instruction mnemonic="pavgusb">
    <opcode> ; 0f 0f /3dnow=BF ; P Q ; ; </opcode>
  </instruction> 

  <instruction mnemonic="push">
    <opcode mode="inv64"> ; 06 ; ES ; ; u:sp d:sp </opcode>
    <opcode mode="inv64"> ; 0e ; CS ; ; u:sp d:sp </opcode>
    <opcode mode="inv64"> ; 16 ; SS ; ; u:sp d:sp </opcode>
    <opcode mode="inv64"> ; 1e ; DS ; ; u:sp d:sp </opcode>
    <opcode> ; 0f a8 ; GS ; ; u:sp d:sp </opcode>
    <opcode> ; 0f a0 ; FS ; ; u:sp d:sp </opcode>
    <opcode mode="def64 depM"> oso rexb ; 50 ; rAXr8 ; ; u:sp d:sp </opcode>
    <opcode mode="def64 depM"> oso rexb ; 51 ; rCXr9 ; ; u:sp d:sp </opcode>
    <opcode mode="def64 depM"> oso rexb ; 52 ; rDXr10 ; ; u:sp d:sp </opcode>
    <opcode mode="def64 depM"> oso rexb ; 53 ; rBXr11 ; ; u:sp d:sp </opcode>
    <opcode mode="def64 depM"> oso rexb ; 54 ; rSPr12 ; ; u:sp d:sp </opcode>
    <opcode mode="def64 depM"> oso rexb ; 55 ; rBPr13 ; ; u:sp d:sp </opcode>
    <opcode mode="def64 depM"> oso rexb ; 56 ; rSIr14 ; ; u:sp d:sp </opcode>
    <opcode mode="def64 depM"> oso rexb ; 57 ; rDIr15 ; ; u:sp d:sp </opcode>
    <opcode cast="1"> oso ; 68 ; Iz ; ; u:sp d:sp </opcode>
    <opcode mode="def64" cast="1"> aso oso rexw rexr rexx rexb ; FF /6 ; Ev ; ; u:sp d:sp </opcode>
    <opcode> ; 6a ; Ib ; ; u:sp d:sp </opcode>
  </instruction>

  <instruction mnemonic="pusha">
    <opcode mode="inv64"> oso ; 60 /O16 ; ; ; d:ax d:bx d:cx d:dx d:sp d:bp d:si d:di </opcode>
  </instruction>

  <instruction mnemonic="pushad">
    <opcode mode="inv64"> oso ; 60 /O32 ; ; ; d:ax d:bx d:cx d:dx d:sp d:bp d:si d:di </opcode>
  </instruction>

  <instruction mnemonic="pushfw">
    <opcode mode="def64"> oso ; 9c /M32 /O16 ; ; u:of u:sf u:zf u:af u:pf u:cf u:tf u:if u:df u:nt ; u:sp d:sp </opcode>
    <opcode mode="def64"> oso ; 9c /M16 /O16 ; ; u:of u:sf u:zf u:af u:pf u:cf u:tf u:if u:df u:nt ; u:sp d:sp </opcode>
  </instruction>

  <instruction mnemonic="pushfd">
    <opcode mode="def64"> oso ; 9c /M16 /O32 ; ; u:of u:sf u:zf u:af u:pf u:cf u:tf u:if u:df u:nt ; u:sp d:sp </opcode>
    <opcode mode="def64"> oso ; 9c /M32 /O32 ; ; u:of u:sf u:zf u:af u:pf u:cf u:tf u:if u:df u:nt ; u:sp d:sp </opcode>
  </instruction>

  <instruction mnemonic="pushfq">
    <opcode mode="def64"> oso rexw ; 9c /M64 ; ; u:of u:sf u:zf u:af u:pf u:cf u:tf u:if u:df u:nt ; u:sp d:sp </opcode>
  </instruction>

  <instruction mnemonic="pxor">
    <opcode> aso rexr rexx rexb ; 0f ef ; Pq Qq ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f ef ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="rcl">
    <opcode cast="1"> aso rexw rexr rexx rexb ; C0 /2 ; Eb Ib ; u:cf d:of d:cf ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; C1 /2 ; Ev Ib ; u:cf d:of d:cf ; </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb ; D0 /2 ; Eb I1 ; u:cf d:of d:cf ; </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb ; D2 /2 ; Eb CL ; u:cf d:of d:cf ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; D3 /2 ; Ev CL ; u:cf d:of d:cf ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; D1 /2 ; Ev I1 ; u:cf d:of d:cf ; </opcode>
  </instruction>

  <instruction mnemonic="rcr">
    <opcode cast="1"> aso rexw rexr rexx rexb ; D0 /3 ; Eb I1 ; u:cf d:of d:cf ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; C1 /3 ; Ev Ib ; u:cf d:of d:cf ; </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb ; C0 /3 ; Eb Ib ; u:cf d:of d:cf ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; D1 /3 ; Ev I1 ; u:cf d:of d:cf ; </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb ; D2 /3 ; Eb CL ; u:cf d:of d:cf ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; D3 /3 ; Ev CL ; u:cf d:of d:cf ; </opcode>
  </instruction>

  <instruction mnemonic="rol">
    <opcode cast="1"> aso rexw rexr rexx rexb ; C0 /0 ; Eb Ib ; u:cf d:of d:cf ; </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb ; D0 /0 ; Eb I1 ; u:cf d:of d:cf ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; D1 /0 ; Ev I1 ; u:cf d:of d:cf ; </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb ; D2 /0 ; Eb CL ; u:cf d:of d:cf ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; D3 /0 ; Ev CL ; u:cf d:of d:cf ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; C1 /0 ; Ev Ib ; u:cf d:of d:cf ; </opcode>
  </instruction>

  <instruction mnemonic="ror">
    <opcode cast="1"> aso rexw rexr rexx rexb ; D0 /1 ; Eb I1 ; u:cf d:of d:cf ; </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb ; C0 /1 ; Eb Ib ; u:cf d:of d:cf ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; C1 /1 ; Ev Ib ; u:cf d:of d:cf ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; D1 /1 ; Ev I1 ; u:cf d:of d:cf ; </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb ; D2 /1 ; Eb CL ; u:cf d:of d:cf ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; D3 /1 ; Ev CL ; u:cf d:of d:cf ; </opcode>
  </instruction>

  <instruction mnemonic="rcpps">
    <opcode> aso rexr rexx rexb ; 0f 53 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 0f 53 ; Vx Wx ; ; </opcode>
  </instruction>

  <instruction mnemonic="rcpss">
    <opcode> aso rexr rexx rexb ; ssef3 0f 53 ; V Wd ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 ssef3 0f 53 ; V X Wd ; ; </opcode>
  </instruction>

  <instruction mnemonic="rdmsr">
    <opcode> ; 0f 32 ; ; ; u:cx d:ax d:dx </opcode>
  </instruction>

 <instruction mnemonic="rdpmc">
    <opcode> ; 0f 33 ; ; ; u:cx d:ax d:dx </opcode>
  </instruction>

  <instruction mnemonic="rdtsc">
    <opcode> ; 0f 31 ; ; ; d:ax d:dx </opcode>
  </instruction>

  <instruction mnemonic="rdtscp">
    <opcode> ; 0F 01 /7 /mod=11 /rm=1 ; ; ; d:ax d:cx d:dx </opcode>  
    <vendor> AMD </vendor>
  </instruction>

  <instruction mnemonic="repne">
    <opcode> ; f2 ; ; ; u:cx d:cx </opcode>
  </instruction>

  <instruction mnemonic="rep">
    <opcode> ; f3 ; ; ; u:cx d:cx </opcode>
  </instruction>

<!-- old ret uses
      u:ax u:dx u:mm0 u:st0 u:bx u:bp u:sp u:12 u:13 u:14 u:15 u:8 u:9 u:di u:si u:dx u:cx
-->
 
  <instruction mnemonic="ret">
    <opcode> ; c2 ; Iw ; ;
      u:ax u:bx u:dx u:sp u:bp u:12 u:13 u:14 u:15 u:mm0 u:mm1 u:st0 u:st1
    </opcode>
    <opcode> ; c3 ; ; ;
      u:ax u:bx u:dx u:sp u:bp u:12 u:13 u:14 u:15 u:mm0 u:mm1 u:st0 u:st1
    </opcode> 
  </instruction>
<!-- old retf uses
    <opcode> ; ca ; Iw ; ; u:ax u:dx u:mm0 u:st0 u:bx u:bp u:sp u:12 u:13 u:14 u:15 u:8 u:9 u:di u:si u:dx u:cx </opcode>
-->
 
  <instruction mnemonic="retf">
    <opcode> ; ca ; Iw ; ; u:ax u:dx u:mm0 u:st0 u:bx u:bp u:sp u:12 u:13 u:14 u:15 u:8 u:9 u:di u:si u:dx u:cx </opcode>
    <opcode> ; cb ; ; ; u:ax u:dx u:mm0 u:st0 u:bx u:bp u:sp u:12 u:13 u:14 u:15 u:8 u:9 u:di u:si u:dx u:cx </opcode>
  </instruction>

  <instruction mnemonic="rsm">
    <opcode> ; 0f aa ; ; d:of d:sf d:zf d:af d:pf d:cf d:tf d:if d:df d:nt d:rf ; </opcode>
  </instruction>

  <instruction mnemonic="rsqrtps">
    <opcode> aso rexr rexx rexb ; 0f 52 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 0f 52 ; V W ; ; </opcode>
  </instruction>

  <instruction mnemonic="rsqrtss">
    <opcode> aso rexr rexx rexb ; ssef3 0f 52 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 ssef3 0f 52 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="sahf">
    <opcode> ; 9e ; ; u:sf u:zf u:af u:pf u:cf ; u:ax </opcode>
  </instruction>

  <instruction mnemonic="sal">
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; D1 /4 ; Ev I1 ; d:alu ; </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb ; C0 /4 ; Eb Ib ; d:alu ; </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb ; D0 /4 ; Eb I1 ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; C1 /4 ; Ev Ib ; d:alu ; </opcode>
    <opcode> aso rexw rexr rexx rexb ; D2 /4 ; Eb CL ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; D3 /4 ; Ev CL ; d:alu ; </opcode>
  </instruction>

  <!-- TODO: not in intel docs? -->
  <instruction mnemonic="salc">
    <opcode mode="inv64"> ; d6 ; ; ; d:ax </opcode>
  </instruction>

  <instruction mnemonic="sar">
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; D1 /7 ; Ev I1 ; d:alu ; </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb ; C0 /7 ; Eb Ib ; d:alu ; </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb ; D0 /7 ; Eb I1 ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; C1 /7 ; Ev Ib ; d:alu ; </opcode>
    <opcode> aso rexw rexr rexx rexb ; D2 /7 ; Eb CL ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; D3 /7 ; Ev CL ; d:alu ; </opcode>
  </instruction>

  <instruction mnemonic="shl">
    <opcode cast="1"> aso rexw rexr rexx rexb ; C0 /6 ; Eb Ib ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; C1 /6 ; Ev Ib ; d:alu ; </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb ; D0 /6 ; Eb I1 ; d:alu ; </opcode>
    <opcode> aso rexw rexr rexx rexb ; D2 /6 ; Eb CL ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; D3 /6 ; Ev CL ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; C1 /4 ; Ev Ib ; d:alu ; </opcode>
    <opcode> aso rexr rexx rexb ; D2 /4 ; Eb CL ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; D1 /4 ; Ev I1 ; d:alu ; </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb ; D0 /4 ; Eb I1 ; d:alu ; </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb ; C0 /4 ; Eb Ib ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; D3 /4 ; Ev CL ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; D1 /6 ; Ev I1 ; d:alu ; </opcode>
  </instruction>

  <instruction mnemonic="shr">
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; C1 /5 ; Ev Ib ; d:alu ; </opcode>
    <opcode> aso rexw rexr rexx rexb ; D2 /5 ; Eb CL ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; D1 /5 ; Ev I1 ; d:alu ; </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb ; D0 /5 ; Eb I1 ; d:alu ; </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb ; C0 /5 ; Eb Ib ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; D3 /5 ; Ev CL ; d:alu ; </opcode>
  </instruction>

  <instruction mnemonic="sbb">
    <opcode> aso rexr rexx rexb ; 18 ; Eb Gb ; u:cf d:alu ; </opcode>
    <opcode> aso oso rexw rexr rexx rexb ; 19 ; Ev Gv ; u:cf d:alu ; </opcode>
    <opcode> aso rexr rexx rexb ; 1a ; Gb Eb ; u:cf d:alu ; </opcode>
    <opcode> aso oso rexw rexr rexx rexb ; 1b ; Gv Ev ; u:cf d:alu ; </opcode>
    <opcode> ; 1c ; AL Ib ; u:cf d:alu ; </opcode>
    <opcode> oso rexw ; 1d ; rAX Iz ; u:cf d:alu ; </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; 80 /3 ; Eb Ib ; u:cf d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; 81 /3 ; Ev Iz ; u:cf d:alu ; </opcode>
    <opcode mode="inv64" cast="1"> aso rexr rexx rexb ; 82 /3 ; Eb Ib ; u:cf d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; 83 /3 ; Ev Ib ; u:cf d:alu ; </opcode>
  </instruction>

  <instruction mnemonic="scasb">
    <opcode> ; ae ; ; u:df ; u:ax u:di d:di </opcode>
  </instruction>

  <instruction mnemonic="scasw">
    <opcode> oso rexw ; af /O16 ; ; u:df ; u:ax u:di d:di </opcode> 
  </instruction>

  <instruction mnemonic="scasd">
    <opcode> oso rexw ; af /O32 ; ; u:df ; u:ax u:di d:di </opcode> 
  </instruction>

  <instruction mnemonic="scasq">
    <opcode> oso rexw ; af /O64 ; ; u:df ; u:ax u:di d:di </opcode> 
  </instruction>

  <instruction mnemonic="seto">
    <opcode> aso rexr rexx rexb ; 0f 90 ; Eb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="setno">
    <opcode> aso rexr rexx rexb ; 0f 91 ; Eb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="setb">
    <opcode> aso rexr rexx rexb ; 0f 92 ; Eb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="setnb">
    <opcode> aso rexr rexx rexb ; 0f 93 ; Eb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="setz">
    <opcode> aso rexr rexx rexb ; 0f 94 ; Eb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="setnz">
    <opcode> aso rexr rexx rexb ; 0f 95 ; Eb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="setbe">
    <opcode> aso rexr rexx rexb ; 0f 96 ; Eb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="seta">
    <opcode> aso rexr rexx rexb ; 0f 97 ; Eb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="sets">
    <opcode> aso rexr rexx rexb ; 0f 98 ; Eb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="setns">
    <opcode> aso rexr rexx rexb ; 0f 99 ; Eb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="setp">
    <opcode> aso rexr rexx rexb ; 0f 9a ; Eb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="setnp">
    <opcode> aso rexr rexx rexb ; 0f 9b ; Eb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="setl">
    <opcode> aso rexr rexx rexb ; 0f 9c ; Eb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="setge">
    <opcode> aso rexr rexx rexb ; 0f 9d ; Eb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="setle">
    <opcode> aso rexr rexx rexb ; 0f 9e ; Eb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="setg">
    <opcode> aso rexr rexx rexb ; 0f 9f ; Eb ; u:of u:sf u:zf u:pf u:cf ; </opcode>
  </instruction>

  <instruction mnemonic="sfence">
    <opcode> ; 0F AE /7 /mod=11 /rm=0 ; ; ; </opcode>
    <opcode> ; 0F AE /7 /mod=11 /rm=1 ; ; ; </opcode>
    <opcode> ; 0F AE /7 /mod=11 /rm=2 ; ; ; </opcode>
    <opcode> ; 0F AE /7 /mod=11 /rm=3 ; ; ; </opcode>
    <opcode> ; 0F AE /7 /mod=11 /rm=4 ; ; ; </opcode>
    <opcode> ; 0F AE /7 /mod=11 /rm=5 ; ; ; </opcode>
    <opcode> ; 0F AE /7 /mod=11 /rm=6 ; ; ; </opcode>
    <opcode> ; 0F AE /7 /mod=11 /rm=7 ; ; ; </opcode>
  </instruction>

  <instruction mnemonic="sgdt">
    <opcode> aso rexr rexx rexb ; 0F 01 /0 /mod=!11 ; M ; ; </opcode>
  </instruction>

  <instruction mnemonic="shld">
    <opcode> aso oso rexw rexr rexx rexb ; 0f a4 ; Ev Gv Ib ; d:alu ; </opcode>
    <opcode> aso oso rexw rexr rexx rexb ; 0f a5 ; Ev Gv CL ; d:alu ; </opcode>
  </instruction>

  <instruction mnemonic="shrd">
    <opcode> aso oso rexw rexr rexx rexb ; 0f ac ; Ev Gv Ib ; d:alu ; </opcode>
    <opcode> aso oso rexw rexr rexx rexb ; 0f ad ; Ev Gv CL ; d:alu ; </opcode>
  </instruction>

  <instruction mnemonic="shufpd">
    <opcode> aso rexr rexx rexb ; sse66 0f c6 ; Vx Wx Ib ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f c6 ; V X W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="shufps">
    <opcode> aso rexr rexx rexb ; 0f c6 ; V W Ib ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 0f c6 ; V X W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="sidt">
    <opcode> aso rexr rexx rexb ; 0F 01 /1 /mod=!11 ; M ; ; </opcode>
  </instruction>

  <instruction mnemonic="sldt">
    <opcode> aso oso rexr rexx rexb ; 0F 00 /0 ; Ev ; ; </opcode>
  </instruction>

  <instruction mnemonic="smsw">
    <opcode> aso rexr rexx rexb ; 0F 01 /4 /mod=!11 ; M ; ; </opcode>
  </instruction>

  <instruction mnemonic="sqrtps">
    <opcode> aso rexr rexx rexb ; 0f 51 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 0f 51 ; V W ; ; </opcode>
  </instruction>

  <instruction mnemonic="sqrtpd">
    <opcode> aso rexr rexx rexb ; sse66 0f 51 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f 51 ; V W ; ; </opcode>
  </instruction>

  <instruction mnemonic="sqrtsd">
    <opcode> aso rexr rexx rexb ; ssef2 0f 51 ; Vq Wq ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 ssef2 0f 51 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="sqrtss">
    <opcode> aso rexr rexx rexb ; ssef3 0f 51 ; Vd Wd ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 ssef3 0f 51 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="stc">
    <opcode> ; f9 ; ; d:cf ; </opcode>
  </instruction>

  <instruction mnemonic="std">
    <opcode> ; fd ; ; d:df ; </opcode>
  </instruction>

  <instruction mnemonic="stgi">
    <opcode> ; 0F 01 /3 /mod=11 /rm=4 ; ; ; </opcode>
    <vendor> AMD </vendor>
  </instruction>

  <instruction mnemonic="sti">
    <opcode> ; fb ; ; d:if ; </opcode>
  </instruction>

  <instruction mnemonic="skinit">
    <opcode> ; 0F 01 /3 /mod=11 /rm=6 ; ; ; </opcode>
    <vendor> AMD </vendor>
  </instruction>

  <instruction mnemonic="stmxcsr">
    <opcode> aso rexw rexr rexx rexb ; 0F AE /3 ; Md ; ; </opcode>
    <opcode> aso rexw rexr rexx rexb vexlz ; avxC4 0F AE /3 ; Md ; ; </opcode>
  </instruction>

  <instruction mnemonic="stosb">
    <opcode imp_addr="1"> ; aa ; ; u:df ; u:ax u:di d:di </opcode>
  </instruction>

  <instruction mnemonic="stosw">
    <opcode imp_addr="1"> oso rexw ; ab /O16 ; ; u:df ; u:ax u:di d:di </opcode> 
  </instruction>

  <instruction mnemonic="stosd">
    <opcode imp_addr="1"> oso rexw ; ab /O32 ; ; u:df ; u:ax u:di d:di </opcode> 
  </instruction>

  <instruction mnemonic="stosq">
    <opcode imp_addr="1"> oso rexw ; ab /O64 ; ; u:df ; u:ax u:di d:di </opcode> 
  </instruction>

  <instruction mnemonic="str">
    <opcode> aso oso rexr rexx rexb ; 0F 00 /1 ; Ev ; ; </opcode>
  </instruction>

  <instruction mnemonic="sub">
    <opcode> aso rexr rexx rexb ; 28 ; Eb Gb ; d:alu ; </opcode>
    <opcode> aso oso rexw rexr rexx rexb ; 29 ; Ev Gv ; d:alu ; </opcode>
    <opcode> aso rexr rexx rexb ; 2a ; Gb Eb ; d:alu ; </opcode>
    <opcode> aso oso rexw rexr rexx rexb ; 2b ; Gv Ev ; d:alu ; </opcode>
    <opcode> ; 2c ; AL Ib ; d:alu ; </opcode>
    <opcode> oso rexw ; 2d ; rAX Iz ; d:alu ; </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; 80 /5 ; Eb Ib ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; 81 /5 ; Ev Iz ; d:alu ; </opcode>
    <opcode mode="inv64" cast="1"> aso rexr rexx rexb ; 82 /5 ; Eb Ib ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; 83 /5 ; Ev Ib ; d:alu ; </opcode>
  </instruction>

  <instruction mnemonic="subpd">
    <opcode> aso rexr rexx rexb ; sse66 0f 5c ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f 5c ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="subps">
    <opcode> aso rexr rexx rexb ; 0f 5c ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 0f 5c ; Vx X Wx ; ; </opcode>
  </instruction>

  <instruction mnemonic="subsd">
    <opcode> aso rexr rexx rexb ; ssef2 0f 5c ; Vq Wq ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 ssef2 0f 5c ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="subss">
    <opcode> aso rexr rexx rexb ; ssef3 0f 5c ; Vd Wd ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 ssef3 0f 5c ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="swapgs">
    <opcode> ; 0F 01 /7 /mod=11 /rm=0 ; ; ; </opcode>
  </instruction>

  <instruction mnemonic="syscall">
    <opcode> ; 0f 05 ; ; ; d:cx </opcode>
  </instruction>

  <!-- TODO doesn't use sp? -->
  <instruction mnemonic="sysenter">
    <opcode mode="inv64"> ; 0f 34 ; ; ; u:sp d:sp </opcode>
  </instruction>

  <instruction mnemonic="sysexit">
    <opcode> ; 0f 35 ; ; ; u:cx u:dx d:sp </opcode>
  </instruction>

  <instruction mnemonic="sysret">
    <opcode> ; 0f 07 ; ; ; u:cx </opcode>
  </instruction>

  <instruction mnemonic="test">
    <opcode cast="1"> aso rexw rexr rexx rexb ; F6 /0 ; Eb Ib ; d:alu ; </opcode>
    <opcode> aso rexr rexx rexb ; 84 ; Eb Gb ; d:alu ; </opcode>
    <opcode> aso oso rexw rexr rexx rexb ; 85 ; Ev Gv ; d:alu ; </opcode>
    <opcode> ; a8 ; AL Ib ; d:alu ; </opcode>
    <opcode> oso rexw ; a9 ; rAX Iz ; d:alu ; </opcode>
    <opcode cast="1"> aso rexw rexr rexx rexb ; F6 /1 ; Eb Ib ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; F7 /0 ; Ev Iz ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; F7 /1 ; Ev Iz ; d:alu ; </opcode>
  </instruction>


  <instruction mnemonic="ucomisd">
    <opcode> aso rexr rexx rexb ; sse66 0f 2e ; Vq Wq ; d:alu ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f 2e ; V W ; d:alu ; </opcode>
  </instruction>

  <instruction mnemonic="ucomiss">
    <opcode> aso rexr rexx rexb ; 0f 2e ; Vd Wd ; d:alu ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 0f 2e ; V W ; d:alu ; </opcode>
  </instruction>

  <instruction mnemonic="ud2">
    <opcode> ; 0f 0b ; ; ; </opcode>
  </instruction>

  <instruction mnemonic="unpckhpd">
    <opcode> aso rexr rexx rexb ; sse66 0f 15 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f 15 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="unpckhps">
    <opcode> aso rexr rexx rexb ; 0f 15 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 0f 15 ; Vx X Wx ; ; </opcode>
  </instruction>

  <instruction mnemonic="unpcklps">
    <opcode> aso rexr rexx rexb ; 0f 14 ; Vq Wq ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 0f 14 ; Vx X Wx ; ; </opcode>
  </instruction>

  <instruction mnemonic="unpcklpd">
    <opcode> aso rexr rexx rexb ; sse66 0f 14 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f 14 ; V X W ; ; </opcode>
  </instruction>

  <!-- pure AVX -->

  <instruction mnemonic="bextr">
    <opcode> aso rexr rexx rexb vexlz; avxC4 sse66 0f /3byte=38 f7 ; V W X ; ; </opcode>
  </instruction>

  <!-- These are incomplete and need correcting FIXME
  <instruction mnemonic="andn">
    <opcode> aso rexr rexx rexb vexlz ; avxC4 0f /3byte=38 f2 ; V X W ; ; </opcode>
  </instruction>



  <instruction mnemonic="blsi">
    <opcode> aso rexr rexx rexb vexlz ; avxC4 0f /3byte=38 f3 ; X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="blsmsk">
    <opcode> aso rexr rexx rexb vexlz ; avxC4 0f /3byte=38 f3 ; X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="blsr">
    <opcode> aso rexr rexx rexb vexlz ; avxC4 0f /3byte=38 f3 ; X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="bzhi">
    <opcode> aso rexr rexx rexb vexlz ; avxC4 0f /3byte=38 f3 ; X W ; ; </opcode>
  </instruction>



  <instruction mnemonic="pext">
    <opcode> aso rexr rexx rexb vexlz ; avxC4 0f /3byte=38 f5 /r ; X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="rorx">
    <opcode> aso rexr rexx rexb vexlz ; avxC4 0f /3byte=3A f0 /r ; X W ; ; </opcode>
  </instruction>

  -->

  <instruction mnemonic="mulx">
    <opcode> aso rexr rexx rexb vexlz ; avxC4 ssef2 0f /3byte=38 f6 /W=0 ; Gd GVd Ed ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlz ; avxC4 ssef2 0f /3byte=38 f6 /W=1 ; Gq GVq Eq ; ; </opcode>
  </instruction>

  <instruction mnemonic="pdep">
    <opcode> aso rexr rexx rexb vexlz ; avxC4 ssef2 0f /3byte=38 f5 /W=0 ; Gd GVd Ed ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlz ; avxC4 ssef2 0f /3byte=38 f5 /W=1 ; Gq GVq Eq ; ; </opcode>
  </instruction>

  <instruction mnemonic="sarx">
    <opcode> aso rexr rexx rexb vexlz ; avxC4 ssef3 0f /3byte=38 f7 /W=0 ; Gd Ed GVd ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlz ; avxC4 ssef3 0f /3byte=38 f7 /W=1 ; Gd Ed GVd ; ; </opcode>
  </instruction>

  <instruction mnemonic="shlx">
    <opcode> aso rexr rexx rexb vexlz ; avxC4 sse66 0f /3byte=38 f7 /W=0 ; Gd Ed GVd ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlz ; avxC4 sse66 0f /3byte=38 f7 /W=1 ; Gd Ed GVd ; ; </opcode>
  </instruction>

  <instruction mnemonic="shrx">
    <opcode> aso rexr rexx rexb vexlz ; avxC4 ssef2 0f /3byte=38 f7 /W=0 ; Gd Ed GVd ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlz ; avxC4 ssef2 0f /3byte=38 f7 /W=1 ; Gd Ed GVd ; ; </opcode>
  </instruction>


  <instruction mnemonic="broadcast">
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 18 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 19 ; V W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 1a ; V W ; ; </opcode>
  </instruction>
 
  <instruction mnemonic="pbroadcastb">
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 78 ; V W ; ; </opcode>
  </instruction>
 
  <instruction mnemonic="pbroadcastw">
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 79 ; V W ; ; </opcode>
  </instruction>
 
  <instruction mnemonic="pbroadcastd">
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 58 ; V W ; ; </opcode>
  </instruction>

  <instruction mnemonic="pbroadcastq">
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 59 ; V W ; ; </opcode>
  </instruction>

  <instruction mnemonic="broadcasti128">
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 5a ; V M ; ; </opcode>
  </instruction>

  <instruction mnemonic="cvtph2ps">
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=3a 1d ; V W ; ; </opcode>
  </instruction>

  <instruction mnemonic="cvtps2ph">
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=3a 1d ; V W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="extractf128">
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=3a 19 ; V W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="extracti128">
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=3a 39 ; V W Ib ; ; </opcode> <!--FIXME check accuracy -->
  </instruction>

  <instruction mnemonic="insertf128">
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=3a 18 ; V X W Ib ; ; </opcode>
  </instruction>

   <instruction mnemonic="inserti128">
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=3a 38 ; V X W Ib ; ; </opcode> <!--FIXME check accuracy -->
  </instruction>

  <instruction mnemonic="maskmov">
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 2c ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 2d ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 2e ; W X V ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 2f ; W X V ; ; </opcode>
  </instruction>

  <instruction mnemonic="permilpd">
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 0d ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=3A 05 ; V W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="permilps">
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 0c ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=3a 04 ; V W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="permf128">
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=3a 06 ; V X W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="permpd">
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=3a 01 /W=1 ; V W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="testpd">
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 0f ; V W ; d:alu ; </opcode>
  </instruction>

  <instruction mnemonic="testps">
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 0e ; V W ; d:alu ; </opcode>
  </instruction>

  <instruction mnemonic="fmaddp">
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 98 ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 a8 ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 b8 ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexix ; avxC4 sse66 0f /3byte=3a 69 ; V X W Ib ; ; </opcode> <!-- Can't find docs for these FIXME -->
    <opcode> aso rexr rexx rexb vexix ; avxC4 sse66 0f /3byte=3a 68 ; V X W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="fmadds">
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 99 ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 a9 ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 b9 ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexix vexlig ; avxC4 sse66 0f /3byte=3a 6b ; V X W Ib ; ; </opcode>
    <opcode> aso rexr rexx rexb vexix vexlig ; avxC4 sse66 0f /3byte=3a 6a ; V X W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="fmaddsubp">
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 96 ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 a6 ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 b6 ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexix ; avxC4 sse66 0f /3byte=3a 5d ; V X W Ib ; ; </opcode>
    <opcode> aso rexr rexx rexb vexix ; avxC4 sse66 0f /3byte=3a 5c ; V X W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="fmsubaddp">
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 97 ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 a7 ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 b7 ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexix ; avxC4 sse66 0f /3byte=3a 5f ; V X W Ib ; ; </opcode>
    <opcode> aso rexr rexx rexb vexix ; avxC4 sse66 0f /3byte=3a 5e ; V X W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="fmsubp">
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 9a ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 aa ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 ba ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexix ; avxC4 sse66 0f /3byte=3a 6d ; V X W Ib ; ; </opcode>
    <opcode> aso rexr rexx rexb vexix ; avxC4 sse66 0f /3byte=3a 6c ; V X W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="fmsubs">
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 9b ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 ab ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 bb ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexix vexlig ; avxC4 sse66 0f /3byte=3a 6f ; V X W Ib ; ; </opcode>
    <opcode> aso rexr rexx rexb vexix vexlig ; avxC4 sse66 0f /3byte=3a 6e ; V X W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="fnmaddp">
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 9c ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 ac ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 bc ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexix ; avxC4 sse66 0f /3byte=3a 79 ; V X W Ib ; ; </opcode>
    <opcode> aso rexr rexx rexb vexix ; avxC4 sse66 0f /3byte=3a 78 ; V X W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="fnmadds">
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 9d ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 ad ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 bd ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexix vexlig ; avxC4 sse66 0f /3byte=3a 7b ; V X W Ib ; ; </opcode>
    <opcode> aso rexr rexx rexb vexix vexlig ; avxC4 sse66 0f /3byte=3a 7a ; V X W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="fnmsubp">
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 9e ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 ae ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 be ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexix ; avxC4 sse66 0f /3byte=3a 7d ; V X W Ib ; ; </opcode>
    <opcode> aso rexr rexx rexb vexix ; avxC4 sse66 0f /3byte=3a 7c ; V X W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="fnmsubs">
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 9f ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 af ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexlig ; avxC4 sse66 0f /3byte=38 bf ; V X W ; ; </opcode>
    <opcode> aso rexr rexx rexb vexix vexlig ; avxC4 sse66 0f /3byte=3a 7f ; V X W Ib ; ; </opcode>
    <opcode> aso rexr rexx rexb vexix vexlig ; avxC4 sse66 0f /3byte=3a 7e ; V X W Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="gatherdpd">
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 92 ; V W X; ; </opcode> <!--FIXME operands incorrect -->
  </instruction>

  <instruction mnemonic="gatherqpd">
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f /3byte=38 93 ; V W X ; ; </opcode>
  </instruction>

  <!-- TODO: also is zeroupper -->
  <instruction mnemonic="zeroall">
    <opcode> aso rexr rexx rexb ; avxC4 0f 77 ; ; ; d:mm0 d:mm1 d:mm2 d:mm3 d:mm4 d:mm5 d:mm6 d:mm7 d:mm8 d:mm9 d:mm10 d:mm11 d:mm12 d:mm13 d:mm14 d:mm15 </opcode>
  </instruction>
 <!-- end pure AVX -->

  <instruction mnemonic="verr">
    <opcode> aso rexr rexx rexb ; 0F 00 /4 ; Ew ; d:zf ; </opcode>
  </instruction>

  <instruction mnemonic="verw">
    <opcode> aso rexr rexx rexb ; 0F 00 /5 ; Ew ; d:zf ; </opcode>
  </instruction>

  <instruction mnemonic="vmcall">
    <opcode> ; 0F 01 /0 /mod=11 /rm=1 ; ; ; </opcode>
    <vendor> INTEL </vendor>
  </instruction>

  <instruction mnemonic="vmclear">
    <opcode> aso rexr rexx rexb ; sse66 0F C7 /0 ; Mq ; ; </opcode>
    <vendor> INTEL </vendor>
  </instruction>

  <instruction mnemonic="vmxon">
    <opcode> aso rexr rexx rexb ; ssef3 0F C7 /7 ; Mq ; ; </opcode>
    <vendor> INTEL </vendor>
  </instruction>

  <instruction mnemonic="vmptrld">
    <opcode> aso rexr rexx rexb ; 0F C7 /0 ; Mq ; ; </opcode>
    <vendor> INTEL </vendor>
  </instruction>

  <instruction mnemonic="vmptrst">
    <opcode> aso rexr rexx rexb ; 0F C7 /7 ; Mq ; ; </opcode>
    <vendor> INTEL </vendor>
  </instruction>

  <instruction mnemonic="vmresume">
    <opcode> ; 0F 01 /0 /mod=11 /rm=3 ; ; ; </opcode>
    <vendor> INTEL </vendor>
  </instruction>

  <instruction mnemonic="vmxoff">
    <opcode> ; 0F 01 /0 /mod=11 /rm=4 ; ; ; </opcode>
    <vendor> INTEL </vendor>
  </instruction>

  <instruction mnemonic="vmrun">
    <opcode> ; 0F 01 /3 /mod=11 /rm=0 ; ; ; </opcode>
    <vendor> AMD </vendor>
  </instruction>

  <instruction mnemonic="vmmcall">
    <opcode> ; 0F 01 /3 /mod=11 /rm=1 ; ; ; </opcode>
    <vendor> AMD </vendor>
  </instruction>

  <instruction mnemonic="vmload">
    <opcode> ; 0F 01 /3 /mod=11 /rm=2 ; ; ; </opcode>
    <vendor> AMD </vendor>
  </instruction>

  <instruction mnemonic="vmsave">
    <opcode> ; 0F 01 /3 /mod=11 /rm=3 ; ; ; </opcode>
    <vendor> AMD </vendor>
  </instruction>

  <instruction mnemonic="wait">
    <opcode> ; 9b ; ; ; </opcode>
  </instruction>

  <instruction mnemonic="wbinvd">
    <opcode> ; 0f 09 ; ; ; </opcode>
  </instruction>

  <instruction mnemonic="wrmsr">
    <opcode> ; 0f 30 ; ; ; </opcode>
  </instruction>

  <instruction mnemonic="xadd">
    <opcode> aso oso rexr rexx rexb ; 0f c0 ; Eb Gb ; d:alu ; </opcode>
    <opcode> aso oso rexw rexr rexx rexb ; sse66 0f c1 ; Ev Gv ; d:alu ; </opcode>
    <opcode> aso rexw rexr rexx rexb ; sse66 0f c0 ; Eb Gb ; d:alu ; </opcode>
    <opcode> aso rexw rexr rexx rexb ; ssef2 0f c0 ; Eb Gb ; d:alu ; </opcode>
    <opcode> aso oso rexr rexx rexb ; ssef2 0f c1 ; Ev Gv ; d:alu ; </opcode>
    <opcode> aso rexw rexr rexx rexb ; ssef3 0f c0 ; Eb Gb ; d:alu ; </opcode>
    <opcode> aso rexw rexr rexx rexb ; ssef3 0f c1 ; Ev Gv ; d:alu ; </opcode>
    <opcode> aso oso rexw rexr rexx rexb ; 0f c1 ; Ev Gv ; d:alu ; </opcode>
  </instruction>

  <instruction mnemonic="xchg">
    <opcode> aso rexr rexx rexb ; 86 ; Eb Gb ; ; </opcode>
    <opcode> aso oso rexw rexr rexx rexb ; 87 ; Ev Gv ; ; </opcode>
    <opcode> oso rexw rexb ; 90 ; rAXr8 rAX ; ; </opcode>
    <opcode> oso rexw rexb ; 91 ; rCXr9 rAX ; ; </opcode>
    <opcode> oso rexw rexb ; 92 ; rDXr10 rAX ; ; </opcode>
    <opcode> oso rexw rexb ; 93 ; rBXr11 rAX ; ; </opcode>
    <opcode> oso rexw rexb ; 94 ; rSPr12 rAX ; ; </opcode>
    <opcode> oso rexw rexb ; 95 ; rBPr13 rAX ; ; </opcode>
    <opcode> oso rexw rexb ; 96 ; rSIr14 rAX ; ; </opcode>
    <opcode> oso rexw rexb ; 97 ; rDIr15 rAX ; ; </opcode>
  </instruction>

  <instruction mnemonic="xgetbv">
    <opcode> ; 0f 01 /2 /mod=11 /rm=0 ; ; ; u:cx d:ax d:dx </opcode>
  </instruction>

  <!-- TODO xlat -->
  <instruction mnemonic="xlatb">
    <opcode> rexw ; d7 ; ; ; u:ax d:ax d:bx </opcode>
  </instruction>

  <instruction mnemonic="xor">
    <opcode> aso rexr rexx rexb ; 30 ; Eb Gb ; d:alu ; </opcode>
    <opcode> aso oso rexw rexr rexx rexb ; 31 ; Ev Gv ; d:alu ; </opcode>
    <opcode> aso rexr rexx rexb ; 32 ; Gb Eb ; d:alu ; </opcode>
    <opcode> aso oso rexw rexr rexx rexb ; 33 ; Gv Ev ; d:alu ; </opcode>
    <opcode> ; 34 ; AL Ib ; d:alu ; </opcode>
    <opcode> oso rexw ; 35 ; rAX Iz ; d:alu ; </opcode>
    <opcode cast="1"> aso rexr rexx rexb ; 80 /6 ; Eb Ib ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; 81 /6 ; Ev Iz ; d:alu ; </opcode>
    <opcode mode="inv64" cast="1"> aso rexr rexx rexb ; 82 /6 ; Eb Ib ; d:alu ; </opcode>
    <opcode cast="1"> aso oso rexw rexr rexx rexb ; 83 /6 ; Ev Ib ; d:alu ; </opcode>
  </instruction>

  <instruction mnemonic="xorpd">
    <opcode> aso rexr rexx rexb ; sse66 0f 57 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 sse66 0f 57 ; V X W ; ; </opcode>
  </instruction>

  <instruction mnemonic="xorps">
    <opcode> aso rexr rexx rexb ; 0f 57 ; Vx Wx ; ; </opcode>
    <opcode> aso rexr rexx rexb ; avxC4 0f 57 ; Vx X Wx ; ; </opcode>
  </instruction>

  <instruction mnemonic="db"></instruction>

  <!-- MVEX -->

  <!-- MVEX vector mask instructions FIXME check k encodings -->

  <instruction mnemonic="jknzd">
    <opcode> rexr rexx rexb rexw ; vex 0f 85 /W=0 ; KV Jz ; ; </opcode>
    <opcode> rexr rexx rexb rexw ; vex 75 /W=0 ; KV Jb ; ; </opcode>
  </instruction>

  <instruction mnemonic="jkzd">
    <opcode> rexr rexx rexb rexw ; vex 0f 84 /W=0 ; KV Jz ; ; </opcode>
    <opcode> rexr rexx rexb rexw ; vex 74 /W=0 ; KV Jb ; ; </opcode>
  </instruction>

  <instruction mnemonic="kand">
    <opcode> rexr rexx rexb rexw ; vex 0f 41 /W=0 ; KR KRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="kandn">
    <opcode> rexr rexx rexb rexw ; vex 0f 42 /W=0 ; KR KRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="kandnr">
    <opcode> rexr rexx rexb rexw ; vex 0f 43 /W=0 ; KR KRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="kconcath">
    <opcode> rexr rexx rexb rexw ; vex 0f 95 /W=0 ; Gq KV KRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="kconcatl">
    <opcode> rexr rexx rexb rexw ; vex 0f 97 /W=0 ; Gq KV KRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="kextract">
    <opcode> rexr rexx rexb rexw ; vex sse66 0f /3byte=3A 3E /W=0 ; KR Gq Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="kmerge2l1h">
    <opcode> rexr rexx rexb rexw ; vex 0f 48 /W=0 ; KR KRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="kmerge2l1l">
    <opcode> rexr rexx rexb rexw ; vex 0f 49 /W=0 ; KR KRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="kmov">
    <opcode> rexr rexx rexb rexw ; vex 0f 90 /W=0 ; KR KRM ; ; </opcode>
    <opcode> rexr rexx rexb rexw ; vex 0f 92 /W=0 ; KR Ed ; ; </opcode>
    <opcode> rexr rexx rexb rexw ; vex 0f 93 /W=0 ; Gd KRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="knot">
    <opcode> rexr rexx rexb rexw ; vex 0f 44 /W=0 ; KR KRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="kor">
    <opcode> rexr rexx rexb rexw ; vex 0f 45 /W=0 ; KR KRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="kortest">
    <opcode> rexr rexx rexb rexw ; vex 0f 98 /W=0 ; KR KRM ; d:alu ; </opcode>
  </instruction>

  <instruction mnemonic="kxnor">
    <opcode> rexr rexx rexb rexw ; vex 0f 46 /W=0 ; KR KRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="kxor">
    <opcode> rexr rexx rexb rexw ; vex 0f 47 /W=0 ; KR KRM ; ; </opcode>
  </instruction>

  <!-- MVEX vector instructions -->
  <instruction mnemonic="vaddnpd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 50 /W=1 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vaddnps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 50 /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vaddpd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f 58 /W=1 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vaddps">
    <opcode> rexr rexx rexb rexw ; mvex 0f 58 /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vaddsetsps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 CC /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="valignd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=3A 03 /W=0 ; ZR ZV ZRM Ib ; ; </opcode> <!-- Ib is an offset, check correct FIXME -->
  </instruction>

  <instruction mnemonic="vblendmpd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 65 /W=1 ; ZR ZV ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vblendmps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 65 /W=0 ; ZR ZV ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vbroadcastf32x4">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 1A /W=0 ; ZR ZM; ; </opcode>
  </instruction>

  <instruction mnemonic="vbroadcastf64x4">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 1B /W=1 ; ZR ZM; ; </opcode>
  </instruction>

  <instruction mnemonic="vbroadcasti32x4">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 5A /W=0 ; ZR ZM; ; </opcode>
  </instruction>

  <instruction mnemonic="vbroadcasti64x4">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 5B /W=1 ; ZR ZM; ; </opcode>
  </instruction>

  <instruction mnemonic="vbroadcastsd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 19 /W=1 ; ZR ZM; ; </opcode>
  </instruction>

  <instruction mnemonic="vbroadcastss">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 18 /W=0 ; ZR ZM; ; </opcode>
  </instruction>

  <instruction mnemonic="vcmppd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f C2 /W=1 ; KR ZV ZRM Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="vcmpps">
    <opcode> rexr rexx rexb rexw ; mvex 0f C2 /W=0 ; KR ZV ZRM Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="vcvtdq2pd">
    <opcode> rexr rexx rexb rexw ; mvex ssef3 0f E6 /W=0 ; ZR ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vcvtfxpntdq2ps">
    <opcode> rexr rexx rexb rexw ; mvex 0f /3byte=3A CB /W=0 ; ZR ZRM Ib; ; </opcode>
  </instruction>

  <instruction mnemonic="vcvtfxpntpd2dq">
    <opcode> rexr rexx rexb rexw ; mvex ssef2 0f /3byte=3A E6 /W=1 ; ZR ZRM Ib; ; </opcode>
  </instruction>

  <instruction mnemonic="vcvtfxpntpd2udq">
    <opcode> rexr rexx rexb rexw ; mvex ssef2 0f /3byte=3A CA /W=1 ; ZR ZRM Ib; ; </opcode>
  </instruction>

  <instruction mnemonic="vcvtfxpntps2dq">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=3A CB /W=0 ; ZR ZRM Ib; ; </opcode>
  </instruction>

  <instruction mnemonic="vcvtfxpntps2udq">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=3A CB /W=0 ; ZR ZRM Ib; ; </opcode>
  </instruction>

  <instruction mnemonic="vcvtfxpntudq2ps">
    <opcode> rexr rexx rexb rexw ; mvex 0f /3byte=3A CA /W=0 ; ZR ZRM Ib; ; </opcode>
  </instruction>

  <instruction mnemonic="vcvtpd2ps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f 5A /W=1 ; ZR ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vcvtps2pd">
    <opcode> rexr rexx rexb rexw ; mvex 0f 5A /W=0 ; ZR ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vcvtudq2pd">
    <opcode> rexr rexx rexb rexw ; mvex ssef3 0f 7A /W=0 ; ZR ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vexp223ps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 C8 /W=0 ; ZR ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vfixupnanpd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 55 /W=1 ; ZR ZV ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vfixupnanps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 55 /W=0 ; ZR ZV ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vfmadd132pd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 98 /W=1 ; ZR ZV ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vfmadd132ps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 98 /W=0 ; ZR ZV ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vfmadd213pd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 A8 /W=1 ; ZR ZV ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vfmadd213ps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 A8 /W=0 ; ZR ZV ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vfmadd231pd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 B8 /W=1 ; ZR ZV ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vfmadd231ps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 B8 /W=0 ; ZR ZV ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vfmadd233ps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 A4 /W=0 ; ZR ZV ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vfmsub132pd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 9A /W=1 ; ZR ZV ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vfmsub132ps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 9A /W=0 ; ZR ZV ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vfmsub213pd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 AA /W=1 ; ZR ZV ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vfmsub213ps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 AA /W=0 ; ZR ZV ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vfmsub231pd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 BA /W=1 ; ZR ZV ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vfmsub231ps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 BA /W=0 ; ZR ZV ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vfnmadd132pd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 9C /W=1 ; ZR ZV ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vfnmadd132ps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 9C /W=0 ; ZR ZV ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vfnmadd213pd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 AC /W=1 ; ZR ZV ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vfnmadd213ps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 AC /W=0 ; ZR ZV ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vfnmadd231pd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 BC /W=1 ; ZR ZV ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vfnmadd231ps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 BC /W=0 ; ZR ZV ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vfnmsub132pd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 9E /W=1 ; ZR ZV ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vfnmsub132ps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 9E /W=0 ; ZR ZV ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vfnmsub213pd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 AE /W=1 ; ZR ZV ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vfnmsub213ps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 AE /W=0 ; ZR ZV ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vfnmsub231pd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 BE /W=1 ; ZR ZV ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vfnmsub231ps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 BE /W=0 ; ZR ZV ZRM; ; </opcode>
  </instruction>

  <instruction mnemonic="vgatherdpd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 92 /W=1 ; ZR ZM; ; </opcode>
  </instruction>

  <instruction mnemonic="vgatherdps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 92 /W=0 ; ZR ZM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vgatherpf0dps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 C6 /W=0 /1 ; ZM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vgatherpf0hintdpd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 C6 /W=1 /0 ; ZM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vgatherpf0hintdps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 C6 /W=0 /0 ; ZM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vgatherpf1dps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 C6 /W=0 /2 ; ZM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vgetexppd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 42 /W=1 ; ZR ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vgetexpps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 42 /W=0 ; ZR ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vgetmantpd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=3A 26 /W=1 ; ZR ZRM Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="vgetmantps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=3A 26 /W=0 ; ZR ZRM Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="vgmaxabsps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 51 /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vgmaxpd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 53 /W=1 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vgmaxps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 53 /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vgminpd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 52 /W=1 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vgminps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 52 /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vloadunpackhd">
    <opcode> rexr rexx rexb rexw ; mvex 0f /3byte=38 D4 /W=0 ; ZR ZM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vloadunpackhpd">
    <opcode> rexr rexx rexb rexw ; mvex 0f /3byte=38 D5 /W=1 ; ZR ZM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vloadunpackhps">
    <opcode> rexr rexx rexb rexw ; mvex 0f /3byte=38 D5 /W=0 ; ZR ZM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vloadunpackhq">
    <opcode> rexr rexx rexb rexw ; mvex 0f /3byte=38 D4 /W=1 ; ZR ZM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vloadunpackld">
    <opcode> rexr rexx rexb rexw ; mvex 0f /3byte=38 D0 /W=0 ; ZR ZM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vloadunpacklpd">
    <opcode> rexr rexx rexb rexw ; mvex 0f /3byte=38 D1 /W=1 ; ZR ZM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vloadunpacklps">
    <opcode> rexr rexx rexb rexw ; mvex 0f /3byte=38 D1 /W=0 ; ZR ZM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vloadunpacklq">
    <opcode> rexr rexx rexb rexw ; mvex 0f /3byte=38 D0 /W=1 ; ZR ZM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vlog2ps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 C9 /W=0 ; ZR ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vmovapd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f 28 /W=1 ; ZR ZRM ; ; </opcode>
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f 29 /W=1 ; ZM ZR ; ; </opcode>
  </instruction>

  <instruction mnemonic="vmovaps">
    <opcode> rexr rexx rexb rexw ; mvex 0f 28 /W=0 ; ZR ZRM ; ; </opcode>
    <opcode> rexr rexx rexb rexw ; mvex 0f 29 /W=0 ; ZM ZR ; ; </opcode>
  </instruction>

  <instruction mnemonic="vmovdqa32">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f 6F /W=0 ; ZR ZRM ; ; </opcode>
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f 7F /W=0 ; ZM ZR ; ; </opcode>
  </instruction>

  <instruction mnemonic="vmovdqa64">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f 6F /W=1 ; ZR ZRM ; ; </opcode>
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f 7F /W=1 ; ZM ZR ; ; </opcode>
  </instruction>

  <instruction mnemonic="vmovnrapd">
    <opcode> rexr rexx rexb rexw ; mvex ssef3 0f 29 /W=1 ; ZM ZR ; ; </opcode>
  </instruction>

  <instruction mnemonic="vmovnraps">
    <opcode> rexr rexx rexb rexw ; mvex ssef2 0f 29 /W=0 ; ZM ZR ; ; </opcode>
  </instruction>

  <instruction mnemonic="vmovnrngoapd">
    <opcode> rexr rexx rexb rexw ; mvex ssef3 0f 29 /W=1 ; ZM ZR ; ; </opcode>
  </instruction>

  <instruction mnemonic="vmovnrngoaps">
    <opcode> rexr rexx rexb rexw ; mvex ssef2 0f 29 /W=0 ; ZM ZR ; ; </opcode>
  </instruction>

  <instruction mnemonic="vmulpd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f 59 /W=1 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vmulps">
    <opcode> rexr rexx rexb rexw ; mvex 0f 59 /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpackstorehd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 D4 /W=0 ; ZM ZR ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpackstorehpd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 D5 /W=1 ; ZM ZR ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpackstorehps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 D5 /W=0 ; ZM ZR ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpackstorehq">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 D4 /W=1 ; ZM ZR ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpackstoreld">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 D0 /W=0 ; ZM ZR ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpackstorelpd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 D1 /W=1 ; ZM ZR ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpackstorelps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 D1 /W=0 ; ZM ZR ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpackstorelq">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 D0 /W=1 ; ZM ZR ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpadcd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 5C /W=0 ; ZR KV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpaddd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f FE /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpaddsetcd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 5D /W=0 ; ZR KV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpaddsetsd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 CD /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpandd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f DB /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpandnd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f DF /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpandnq">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f DF /W=1 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpandq">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f DB /W=1 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpblendmd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 64 /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpblendmq">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 64 /W=1 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpbroadcastd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 58 /W=0 ; ZR ZM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpbroadcastq">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 59 /W=1 ; ZR ZM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpcmpd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=3A 1F /W=0 ; KR ZV ZRM Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpcmpeqd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f 76 /W=0 ; KR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpcmpgtd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f 66 /W=0 ; KR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpcmpltd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 74 /W=0 ; KR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpcmpud">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=3A 1E /W=0 ; KR ZV ZRM Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpermd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 36 /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpermf32x4">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=3A 07 /W=0 ; ZR ZRM Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpgatherdd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 90 /W=0 ; ZR ZM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpgatherdq">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 90 /W=1 ; ZR ZM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpmadd231d">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 B5 /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpmadd233d">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 B4 /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpmaxsd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 3D /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpmaxud">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 3F /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpminsd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 39 /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpminud">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 3B /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpmulhd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 87 /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpmulhud">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 86 /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpmulld">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 40 /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpord">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f EB /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vporq">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f EB /W=1 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpsbbd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 5E /W=0 ; ZR KV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpsbbrd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 6E /W=0 ; ZR KV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpscatterdd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 A0 /W=0 ; ZM ZR ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpscatterdq">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 A0 /W=1 ; ZM ZR ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpshufd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f 70 /W=0 ; ZR ZRM Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpslld">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f 72 /W=0 /6 ; ZR ZRM Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpsllvd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 47 /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpsrad">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f 72 /W=0 /4 ; ZR ZRM Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpsravd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 46 /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpsrld">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f 72 /W=0 /2 ; ZR ZRM Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpsrlvd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 45 /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpsubd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f FA /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpsubrd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 6C /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpsubrsetbd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 6F /W=0 ; ZR KV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpsubsetbd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 5F /W=0 ; ZR KV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vptestmd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 27 /W=0 ; KR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpxord">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f EF /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vpxorq">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f EF /W=1 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vrcp23ps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 CA /W=0 ; ZR ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vrndfxpntpd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=3A 52 /W=1 ; ZR ZRM Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="vrndfxpntps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=3A 52 /W=0 ; ZR ZRM Ib ; ; </opcode>
  </instruction>

  <instruction mnemonic="vrsqrt23ps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 CB /W=0 ; ZR ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vscaleps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 84 /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vscatterdpd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 A2 /W=1 ; ZM ZR ; ; </opcode>
  </instruction>

  <instruction mnemonic="vscatterdpd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 A2 /W=0 ; ZM ZR ; ; </opcode>
  </instruction>

  <instruction mnemonic="vscatterpf0dps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 C6 /W=0 /5 ; ZM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vscatterpf0hintdpd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 C6 /W=1 /4 ; ZM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vscatterpf0hintdps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 C6 /W=0 /4 ; ZM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vscatterpf1dps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 C6 /W=0 /6 ; ZM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vsubpd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f 5C /W=1 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vsubps">
    <opcode> rexr rexx rexb rexw ; mvex 0f 5C /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vsubrpd">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 6D /W=1 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <instruction mnemonic="vsubrps">
    <opcode> rexr rexx rexb rexw ; mvex sse66 0f /3byte=38 6D /W=0 ; ZR ZV ZRM ; ; </opcode>
  </instruction>

  <!-- MVEX Scalar Instructions -->

  <instruction mnemonic="clevict0">
    <opcode> rexr rexx rexb rexw ; mvex ssef2 0f AE /7 ; M ; ; </opcode>
  </instruction>

  <instruction mnemonic="clevict1">
    <opcode> rexr rexx rexb rexw ; mvex ssef3 0f AE /7 ; M ; ; </opcode>
  </instruction>

  <instruction mnemonic="delay">
    <opcode> rexr rexx rexb rexw ; vex ssef3 0f AE /6 /W=0 ; Gd ; ; </opcode>
    <opcode> rexr rexx rexb rexw ; vex ssef3 0f AE /6 /W=1 ; Gq ; ; </opcode>
  </instruction>

  <instruction mnemonic="lzcnt">
    <opcode> rexr rexx rexb rexw ; vex ssef3 0f BD /W=0 ; Gd Ed ; ; </opcode>
    <opcode> rexr rexx rexb rexw ; vex ssef3 0f BD /W=1 ; Gq Eq ; ; </opcode>
  </instruction>

  <instruction mnemonic="popcnt">
    <opcode> rexr rexx rexb rexw ; ssef3 0f B8 ; Gd Ed ; ; </opcode>
    <opcode> rexr rexx rexb rexw ; ssef3 0f B8 ; Gq Eq ; ; </opcode>
    <opcode> rexr rexx rexb rexw ; vex ssef3 0f B8 /W=0 ; Gd Ed ; ; </opcode>
    <opcode> rexr rexx rexb rexw ; vex ssef3 0f B8 /W=1 ; Gq Eq ; ; </opcode>
  </instruction>

  <instruction mnemonic="spflt">
    <opcode> rexr rexx rexb rexw ; vex ssef2 0f AE /6 /W=0 ; Gd ; ; </opcode>
    <opcode> rexr rexx rexb rexw ; vex ssef2 0f AE /6 /W=1 ; Gq ; ; </opcode>
  </instruction>

  <instruction mnemonic="tzcnt">
    <opcode> rexr rexx rexb rexw ; vex ssef3 0f BC /W=0 ; Gd Ed ; ; </opcode>
    <opcode> rexr rexx rexb rexw ; vex ssef3 0f BC /W=1 ; Gq Eq ; ; </opcode>
  </instruction>

  <instruction mnemonic="tzcnti">
    <opcode> rexr rexx rexb rexw ; vex ssef2 0f BC /W=0 ; Gd Ed ; ; </opcode>
    <opcode> rexr rexx rexb rexw ; vex ssef2 0f BC /W=1 ; Gq Eq ; ; </opcode>
  </instruction>

  <instruction mnemonic="vprefetch0">
    <opcode> rexr rexx rexb rexw ; mvex 0f 18 /1 ; M ; ; </opcode>
    <opcode> rexr rexx rexb rexw ; vex 0f 18 /1 ; M ; ; </opcode>
  </instruction>

  <instruction mnemonic="vprefetch1">
    <opcode> rexr rexx rexb rexw ; mvex 0f 18 /2 ; M ; ; </opcode>
    <opcode> rexr rexx rexb rexw ; vex 0f 18 /2 ; M ; ; </opcode>
  </instruction>

  <instruction mnemonic="vprefetch2">
    <opcode> rexr rexx rexb rexw ; mvex 0f 18 /3 ; M ; ; </opcode>
    <opcode> rexr rexx rexb rexw ; vex 0f 18 /3 ; M ; ; </opcode>
  </instruction>

  <instruction mnemonic="vprefetche0">
    <opcode> rexr rexx rexb rexw ; mvex 0f 18 /5 ; M ; ; </opcode>
    <opcode> rexr rexx rexb rexw ; vex 0f 18 /5 ; M ; ; </opcode>
  </instruction>

  <instruction mnemonic="vprefetche1">
    <opcode> rexr rexx rexb rexw ; mvex 0f 18 /6 ; M ; ; </opcode>
    <opcode> rexr rexx rexb rexw ; vex 0f 18 /6 ; M ; ; </opcode>
  </instruction>

  <instruction mnemonic="vprefetche2">
    <opcode> rexr rexx rexb rexw ; mvex 0f 18 /7 ; M ; ; </opcode>
    <opcode> rexr rexx rexb rexw ; vex 0f 18 /7 ; M ; ; </opcode>
  </instruction>

  <instruction mnemonic="vprefetchenta">
    <opcode> rexr rexx rexb rexw ; mvex 0f 18 /4 ; M ; ; </opcode>
    <opcode> rexr rexx rexb rexw ; vex 0f 18 /4 ; M ; ; </opcode>
  </instruction>

  <instruction mnemonic="vprefetchnta">
    <opcode> rexr rexx rexb rexw ; mvex 0f 18 /0 ; M ; ; </opcode>
    <opcode> rexr rexx rexb rexw ; vex 0f 18 /0 ; M ; ; </opcode>
  </instruction>

  <instruction mnemonic="vundefined">
    <opcode> rexr rexx rexb rexw ; mvex 0f /3byte=3A d1 ; ZR Ib; ; </opcode>
  </instruction>



</x86optable>
